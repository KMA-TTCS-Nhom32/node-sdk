/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CancelPaymentRequestDto } from '../models';
// @ts-ignore
import type { ConfirmPaymentWebhookDto } from '../models';
// @ts-ignore
import type { CreatePaymentRequestDto } from '../models';
/**
 * PayOSApi - axios parameter creator
 * @export
 */
export const PayOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel a payment link
         * @param {CancelPaymentRequestDto} cancelPaymentRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCancelPayment: async (cancelPaymentRequestDto: CancelPaymentRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cancelPaymentRequestDto' is not null or undefined
            assertParamExists('payosControllerCancelPayment', 'cancelPaymentRequestDto', cancelPaymentRequestDto)
            const localVarPath = `/api/payos/cancel-payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelPaymentRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new payment request
         * @param {CreatePaymentRequestDto} createPaymentRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCreatePaymentRequest: async (createPaymentRequestDto: CreatePaymentRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPaymentRequestDto' is not null or undefined
            assertParamExists('payosControllerCreatePaymentRequest', 'createPaymentRequestDto', createPaymentRequestDto)
            const localVarPath = `/api/payos/payment-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get payment status
         * @param {string} paymentLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerGetPaymentStatus: async (paymentLinkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentLinkId' is not null or undefined
            assertParamExists('payosControllerGetPaymentStatus', 'paymentLinkId', paymentLinkId)
            const localVarPath = `/api/payos/payment-status/{paymentLinkId}`
                .replace(`{${"paymentLinkId"}}`, encodeURIComponent(String(paymentLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Handle payment confirmation webhook
         * @param {ConfirmPaymentWebhookDto} confirmPaymentWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerHandleWebhook: async (confirmPaymentWebhookDto: ConfirmPaymentWebhookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'confirmPaymentWebhookDto' is not null or undefined
            assertParamExists('payosControllerHandleWebhook', 'confirmPaymentWebhookDto', confirmPaymentWebhookDto)
            const localVarPath = `/api/payos/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmPaymentWebhookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayOSApi - functional programming interface
 * @export
 */
export const PayOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayOSApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel a payment link
         * @param {CancelPaymentRequestDto} cancelPaymentRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payosControllerCancelPayment(cancelPaymentRequestDto: CancelPaymentRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payosControllerCancelPayment(cancelPaymentRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayOSApi.payosControllerCancelPayment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new payment request
         * @param {CreatePaymentRequestDto} createPaymentRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payosControllerCreatePaymentRequest(createPaymentRequestDto: CreatePaymentRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payosControllerCreatePaymentRequest(createPaymentRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayOSApi.payosControllerCreatePaymentRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get payment status
         * @param {string} paymentLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payosControllerGetPaymentStatus(paymentLinkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payosControllerGetPaymentStatus(paymentLinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayOSApi.payosControllerGetPaymentStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Handle payment confirmation webhook
         * @param {ConfirmPaymentWebhookDto} confirmPaymentWebhookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payosControllerHandleWebhook(confirmPaymentWebhookDto: ConfirmPaymentWebhookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payosControllerHandleWebhook(confirmPaymentWebhookDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayOSApi.payosControllerHandleWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PayOSApi - factory interface
 * @export
 */
export const PayOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayOSApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel a payment link
         * @param {PayOSApiPayosControllerCancelPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCancelPayment(requestParameters: PayOSApiPayosControllerCancelPaymentRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.payosControllerCancelPayment(requestParameters.cancelPaymentRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new payment request
         * @param {PayOSApiPayosControllerCreatePaymentRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCreatePaymentRequest(requestParameters: PayOSApiPayosControllerCreatePaymentRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.payosControllerCreatePaymentRequest(requestParameters.createPaymentRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get payment status
         * @param {PayOSApiPayosControllerGetPaymentStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerGetPaymentStatus(requestParameters: PayOSApiPayosControllerGetPaymentStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.payosControllerGetPaymentStatus(requestParameters.paymentLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Handle payment confirmation webhook
         * @param {PayOSApiPayosControllerHandleWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerHandleWebhook(requestParameters: PayOSApiPayosControllerHandleWebhookRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.payosControllerHandleWebhook(requestParameters.confirmPaymentWebhookDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for payosControllerCancelPayment operation in PayOSApi.
 * @export
 * @interface PayOSApiPayosControllerCancelPaymentRequest
 */
export interface PayOSApiPayosControllerCancelPaymentRequest {
    /**
     * 
     * @type {CancelPaymentRequestDto}
     * @memberof PayOSApiPayosControllerCancelPayment
     */
    readonly cancelPaymentRequestDto: CancelPaymentRequestDto
}

/**
 * Request parameters for payosControllerCreatePaymentRequest operation in PayOSApi.
 * @export
 * @interface PayOSApiPayosControllerCreatePaymentRequestRequest
 */
export interface PayOSApiPayosControllerCreatePaymentRequestRequest {
    /**
     * 
     * @type {CreatePaymentRequestDto}
     * @memberof PayOSApiPayosControllerCreatePaymentRequest
     */
    readonly createPaymentRequestDto: CreatePaymentRequestDto
}

/**
 * Request parameters for payosControllerGetPaymentStatus operation in PayOSApi.
 * @export
 * @interface PayOSApiPayosControllerGetPaymentStatusRequest
 */
export interface PayOSApiPayosControllerGetPaymentStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof PayOSApiPayosControllerGetPaymentStatus
     */
    readonly paymentLinkId: string
}

/**
 * Request parameters for payosControllerHandleWebhook operation in PayOSApi.
 * @export
 * @interface PayOSApiPayosControllerHandleWebhookRequest
 */
export interface PayOSApiPayosControllerHandleWebhookRequest {
    /**
     * 
     * @type {ConfirmPaymentWebhookDto}
     * @memberof PayOSApiPayosControllerHandleWebhook
     */
    readonly confirmPaymentWebhookDto: ConfirmPaymentWebhookDto
}

/**
 * PayOSApi - object-oriented interface
 * @export
 * @class PayOSApi
 * @extends {BaseAPI}
 */
export class PayOSApi extends BaseAPI {
    /**
     * 
     * @summary Cancel a payment link
     * @param {PayOSApiPayosControllerCancelPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    public payosControllerCancelPayment(requestParameters: PayOSApiPayosControllerCancelPaymentRequest, options?: RawAxiosRequestConfig) {
        return PayOSApiFp(this.configuration).payosControllerCancelPayment(requestParameters.cancelPaymentRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new payment request
     * @param {PayOSApiPayosControllerCreatePaymentRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    public payosControllerCreatePaymentRequest(requestParameters: PayOSApiPayosControllerCreatePaymentRequestRequest, options?: RawAxiosRequestConfig) {
        return PayOSApiFp(this.configuration).payosControllerCreatePaymentRequest(requestParameters.createPaymentRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get payment status
     * @param {PayOSApiPayosControllerGetPaymentStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    public payosControllerGetPaymentStatus(requestParameters: PayOSApiPayosControllerGetPaymentStatusRequest, options?: RawAxiosRequestConfig) {
        return PayOSApiFp(this.configuration).payosControllerGetPaymentStatus(requestParameters.paymentLinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Handle payment confirmation webhook
     * @param {PayOSApiPayosControllerHandleWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    public payosControllerHandleWebhook(requestParameters: PayOSApiPayosControllerHandleWebhookRequest, options?: RawAxiosRequestConfig) {
        return PayOSApiFp(this.configuration).payosControllerHandleWebhook(requestParameters.confirmPaymentWebhookDto, options).then((request) => request(this.axios, this.basePath));
    }
}

