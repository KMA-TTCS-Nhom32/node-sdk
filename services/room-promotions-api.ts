/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateRoomPromotionDto } from '../models';
// @ts-ignore
import type { RoomPromotion } from '../models';
// @ts-ignore
import type { RoomPromotionPaginationResultDto } from '../models';
// @ts-ignore
import type { UpdateRoomPromotionDto } from '../models';
/**
 * RoomPromotionsApi - axios parameter creator
 * @export
 */
export const RoomPromotionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new room promotion
         * @param {CreateRoomPromotionDto} createRoomPromotionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerCreate: async (createRoomPromotionDto: CreateRoomPromotionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoomPromotionDto' is not null or undefined
            assertParamExists('roomPromotionControllerCreate', 'createRoomPromotionDto', createRoomPromotionDto)
            const localVarPath = `/api/room-promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomPromotionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all soft-deleted room promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindDeleted: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room-promotions/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all room promotions with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterRoomPromotionDto
         * @param {string} [sort] JSON string of SortRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindMany: async (page?: number, pageSize?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room-promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get room promotion by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerFindOne', 'id', id)
            const localVarPath = `/api/room-promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a room promotion
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerRemove', 'id', id)
            const localVarPath = `/api/room-promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore a soft-deleted room promotion
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRestore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerRestore', 'id', id)
            const localVarPath = `/api/room-promotions/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a room promotion
         * @param {string} id 
         * @param {UpdateRoomPromotionDto} updateRoomPromotionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerUpdate: async (id: string, updateRoomPromotionDto: UpdateRoomPromotionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerUpdate', 'id', id)
            // verify required parameter 'updateRoomPromotionDto' is not null or undefined
            assertParamExists('roomPromotionControllerUpdate', 'updateRoomPromotionDto', updateRoomPromotionDto)
            const localVarPath = `/api/room-promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoomPromotionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate a promotion code for a specific room
         * @param {string} code 
         * @param {string} roomDetailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerValidatePromotionCode: async (code: string, roomDetailId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('roomPromotionControllerValidatePromotionCode', 'code', code)
            // verify required parameter 'roomDetailId' is not null or undefined
            assertParamExists('roomPromotionControllerValidatePromotionCode', 'roomDetailId', roomDetailId)
            const localVarPath = `/api/room-promotions/validate/{code}/room/{roomDetailId}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"roomDetailId"}}`, encodeURIComponent(String(roomDetailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomPromotionsApi - functional programming interface
 * @export
 */
export const RoomPromotionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomPromotionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new room promotion
         * @param {CreateRoomPromotionDto} createRoomPromotionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerCreate(createRoomPromotionDto: CreateRoomPromotionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerCreate(createRoomPromotionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all soft-deleted room promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomPromotion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerFindDeleted(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerFindDeleted']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all room promotions with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterRoomPromotionDto
         * @param {string} [sort] JSON string of SortRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomPromotionPaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerFindMany(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerFindMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get room promotion by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a room promotion
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore a soft-deleted room promotion
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerRestore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerRestore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a room promotion
         * @param {string} id 
         * @param {UpdateRoomPromotionDto} updateRoomPromotionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerUpdate(id: string, updateRoomPromotionDto: UpdateRoomPromotionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerUpdate(id, updateRoomPromotionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate a promotion code for a specific room
         * @param {string} code 
         * @param {string} roomDetailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomPromotionControllerValidatePromotionCode(code: string, roomDetailId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomPromotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomPromotionControllerValidatePromotionCode(code, roomDetailId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomPromotionsApi.roomPromotionControllerValidatePromotionCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoomPromotionsApi - factory interface
 * @export
 */
export const RoomPromotionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomPromotionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerCreate(requestParameters: RoomPromotionsApiRoomPromotionControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomPromotion> {
            return localVarFp.roomPromotionControllerCreate(requestParameters.createRoomPromotionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all soft-deleted room promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoomPromotion>> {
            return localVarFp.roomPromotionControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all room promotions with pagination and filters
         * @param {RoomPromotionsApiRoomPromotionControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindMany(requestParameters: RoomPromotionsApiRoomPromotionControllerFindManyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RoomPromotionPaginationResultDto> {
            return localVarFp.roomPromotionControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get room promotion by ID
         * @param {RoomPromotionsApiRoomPromotionControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindOne(requestParameters: RoomPromotionsApiRoomPromotionControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomPromotion> {
            return localVarFp.roomPromotionControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRemove(requestParameters: RoomPromotionsApiRoomPromotionControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.roomPromotionControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore a soft-deleted room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRestore(requestParameters: RoomPromotionsApiRoomPromotionControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomPromotion> {
            return localVarFp.roomPromotionControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerUpdate(requestParameters: RoomPromotionsApiRoomPromotionControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomPromotion> {
            return localVarFp.roomPromotionControllerUpdate(requestParameters.id, requestParameters.updateRoomPromotionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate a promotion code for a specific room
         * @param {RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerValidatePromotionCode(requestParameters: RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomPromotion> {
            return localVarFp.roomPromotionControllerValidatePromotionCode(requestParameters.code, requestParameters.roomDetailId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for roomPromotionControllerCreate operation in RoomPromotionsApi.
 * @export
 * @interface RoomPromotionsApiRoomPromotionControllerCreateRequest
 */
export interface RoomPromotionsApiRoomPromotionControllerCreateRequest {
    /**
     * 
     * @type {CreateRoomPromotionDto}
     * @memberof RoomPromotionsApiRoomPromotionControllerCreate
     */
    readonly createRoomPromotionDto: CreateRoomPromotionDto
}

/**
 * Request parameters for roomPromotionControllerFindMany operation in RoomPromotionsApi.
 * @export
 * @interface RoomPromotionsApiRoomPromotionControllerFindManyRequest
 */
export interface RoomPromotionsApiRoomPromotionControllerFindManyRequest {
    /**
     * 
     * @type {number}
     * @memberof RoomPromotionsApiRoomPromotionControllerFindMany
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoomPromotionsApiRoomPromotionControllerFindMany
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterRoomPromotionDto
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerFindMany
     */
    readonly filters?: string

    /**
     * JSON string of SortRoomPromotionDto
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerFindMany
     */
    readonly sort?: string
}

/**
 * Request parameters for roomPromotionControllerFindOne operation in RoomPromotionsApi.
 * @export
 * @interface RoomPromotionsApiRoomPromotionControllerFindOneRequest
 */
export interface RoomPromotionsApiRoomPromotionControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for roomPromotionControllerRemove operation in RoomPromotionsApi.
 * @export
 * @interface RoomPromotionsApiRoomPromotionControllerRemoveRequest
 */
export interface RoomPromotionsApiRoomPromotionControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for roomPromotionControllerRestore operation in RoomPromotionsApi.
 * @export
 * @interface RoomPromotionsApiRoomPromotionControllerRestoreRequest
 */
export interface RoomPromotionsApiRoomPromotionControllerRestoreRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerRestore
     */
    readonly id: string
}

/**
 * Request parameters for roomPromotionControllerUpdate operation in RoomPromotionsApi.
 * @export
 * @interface RoomPromotionsApiRoomPromotionControllerUpdateRequest
 */
export interface RoomPromotionsApiRoomPromotionControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateRoomPromotionDto}
     * @memberof RoomPromotionsApiRoomPromotionControllerUpdate
     */
    readonly updateRoomPromotionDto: UpdateRoomPromotionDto
}

/**
 * Request parameters for roomPromotionControllerValidatePromotionCode operation in RoomPromotionsApi.
 * @export
 * @interface RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest
 */
export interface RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerValidatePromotionCode
     */
    readonly code: string

    /**
     * 
     * @type {string}
     * @memberof RoomPromotionsApiRoomPromotionControllerValidatePromotionCode
     */
    readonly roomDetailId: string
}

/**
 * RoomPromotionsApi - object-oriented interface
 * @export
 * @class RoomPromotionsApi
 * @extends {BaseAPI}
 */
export class RoomPromotionsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerCreate(requestParameters: RoomPromotionsApiRoomPromotionControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerCreate(requestParameters.createRoomPromotionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all soft-deleted room promotions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerFindDeleted(options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all room promotions with pagination and filters
     * @param {RoomPromotionsApiRoomPromotionControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerFindMany(requestParameters: RoomPromotionsApiRoomPromotionControllerFindManyRequest = {}, options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get room promotion by ID
     * @param {RoomPromotionsApiRoomPromotionControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerFindOne(requestParameters: RoomPromotionsApiRoomPromotionControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerRemove(requestParameters: RoomPromotionsApiRoomPromotionControllerRemoveRequest, options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore a soft-deleted room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerRestore(requestParameters: RoomPromotionsApiRoomPromotionControllerRestoreRequest, options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerUpdate(requestParameters: RoomPromotionsApiRoomPromotionControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerUpdate(requestParameters.id, requestParameters.updateRoomPromotionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate a promotion code for a specific room
     * @param {RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    public roomPromotionControllerValidatePromotionCode(requestParameters: RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest, options?: RawAxiosRequestConfig) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerValidatePromotionCode(requestParameters.code, requestParameters.roomDetailId, options).then((request) => request(this.axios, this.basePath));
    }
}

