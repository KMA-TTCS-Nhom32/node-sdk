/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AmenitiesPaginationResultDto } from '../models';
// @ts-ignore
import type { Amenity } from '../models';
// @ts-ignore
import type { CreateAmenityDto } from '../models';
// @ts-ignore
import type { UpdateAmenityDto } from '../models';
/**
 * AmenitiesApi - axios parameter creator
 * @export
 */
export const AmenitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new amenity
         * @param {CreateAmenityDto} createAmenityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerCreate: async (createAmenityDto: CreateAmenityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAmenityDto' is not null or undefined
            assertParamExists('amenitiesControllerCreate', 'createAmenityDto', createAmenityDto)
            const localVarPath = `/api/amenities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAmenityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get amenities
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterAmenityDto
         * @param {string} [sort] JSON string of SortAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindMany: async (page?: number, pageSize?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/amenities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get amenity by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('amenitiesControllerFindOne', 'id', id)
            const localVarPath = `/api/amenities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete amenity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('amenitiesControllerRemove', 'id', id)
            const localVarPath = `/api/amenities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update amenity
         * @param {string} id 
         * @param {UpdateAmenityDto} updateAmenityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerUpdate: async (id: string, updateAmenityDto: UpdateAmenityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('amenitiesControllerUpdate', 'id', id)
            // verify required parameter 'updateAmenityDto' is not null or undefined
            assertParamExists('amenitiesControllerUpdate', 'updateAmenityDto', updateAmenityDto)
            const localVarPath = `/api/amenities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAmenityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmenitiesApi - functional programming interface
 * @export
 */
export const AmenitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmenitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new amenity
         * @param {CreateAmenityDto} createAmenityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amenitiesControllerCreate(createAmenityDto: CreateAmenityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Amenity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amenitiesControllerCreate(createAmenityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmenitiesApi.amenitiesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get amenities
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterAmenityDto
         * @param {string} [sort] JSON string of SortAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amenitiesControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmenitiesPaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amenitiesControllerFindMany(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmenitiesApi.amenitiesControllerFindMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get amenity by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amenitiesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Amenity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amenitiesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmenitiesApi.amenitiesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete amenity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amenitiesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amenitiesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmenitiesApi.amenitiesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update amenity
         * @param {string} id 
         * @param {UpdateAmenityDto} updateAmenityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amenitiesControllerUpdate(id: string, updateAmenityDto: UpdateAmenityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Amenity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amenitiesControllerUpdate(id, updateAmenityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AmenitiesApi.amenitiesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AmenitiesApi - factory interface
 * @export
 */
export const AmenitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmenitiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new amenity
         * @param {AmenitiesApiAmenitiesControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerCreate(requestParameters: AmenitiesApiAmenitiesControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Amenity> {
            return localVarFp.amenitiesControllerCreate(requestParameters.createAmenityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get amenities
         * @param {AmenitiesApiAmenitiesControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindMany(requestParameters: AmenitiesApiAmenitiesControllerFindManyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AmenitiesPaginationResultDto> {
            return localVarFp.amenitiesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get amenity by ID
         * @param {AmenitiesApiAmenitiesControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindOne(requestParameters: AmenitiesApiAmenitiesControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<Amenity> {
            return localVarFp.amenitiesControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete amenity
         * @param {AmenitiesApiAmenitiesControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerRemove(requestParameters: AmenitiesApiAmenitiesControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.amenitiesControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update amenity
         * @param {AmenitiesApiAmenitiesControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerUpdate(requestParameters: AmenitiesApiAmenitiesControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Amenity> {
            return localVarFp.amenitiesControllerUpdate(requestParameters.id, requestParameters.updateAmenityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for amenitiesControllerCreate operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerCreateRequest
 */
export interface AmenitiesApiAmenitiesControllerCreateRequest {
    /**
     * 
     * @type {CreateAmenityDto}
     * @memberof AmenitiesApiAmenitiesControllerCreate
     */
    readonly createAmenityDto: CreateAmenityDto
}

/**
 * Request parameters for amenitiesControllerFindMany operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerFindManyRequest
 */
export interface AmenitiesApiAmenitiesControllerFindManyRequest {
    /**
     * 
     * @type {number}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterAmenityDto
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly filters?: string

    /**
     * JSON string of SortAmenityDto
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly sort?: string
}

/**
 * Request parameters for amenitiesControllerFindOne operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerFindOneRequest
 */
export interface AmenitiesApiAmenitiesControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for amenitiesControllerRemove operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerRemoveRequest
 */
export interface AmenitiesApiAmenitiesControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for amenitiesControllerUpdate operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerUpdateRequest
 */
export interface AmenitiesApiAmenitiesControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateAmenityDto}
     * @memberof AmenitiesApiAmenitiesControllerUpdate
     */
    readonly updateAmenityDto: UpdateAmenityDto
}

/**
 * AmenitiesApi - object-oriented interface
 * @export
 * @class AmenitiesApi
 * @extends {BaseAPI}
 */
export class AmenitiesApi extends BaseAPI {
    /**
     * 
     * @summary Create new amenity
     * @param {AmenitiesApiAmenitiesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    public amenitiesControllerCreate(requestParameters: AmenitiesApiAmenitiesControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return AmenitiesApiFp(this.configuration).amenitiesControllerCreate(requestParameters.createAmenityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get amenities
     * @param {AmenitiesApiAmenitiesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    public amenitiesControllerFindMany(requestParameters: AmenitiesApiAmenitiesControllerFindManyRequest = {}, options?: RawAxiosRequestConfig) {
        return AmenitiesApiFp(this.configuration).amenitiesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get amenity by ID
     * @param {AmenitiesApiAmenitiesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    public amenitiesControllerFindOne(requestParameters: AmenitiesApiAmenitiesControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return AmenitiesApiFp(this.configuration).amenitiesControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete amenity
     * @param {AmenitiesApiAmenitiesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    public amenitiesControllerRemove(requestParameters: AmenitiesApiAmenitiesControllerRemoveRequest, options?: RawAxiosRequestConfig) {
        return AmenitiesApiFp(this.configuration).amenitiesControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update amenity
     * @param {AmenitiesApiAmenitiesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    public amenitiesControllerUpdate(requestParameters: AmenitiesApiAmenitiesControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return AmenitiesApiFp(this.configuration).amenitiesControllerUpdate(requestParameters.id, requestParameters.updateAmenityDto, options).then((request) => request(this.axios, this.basePath));
    }
}

