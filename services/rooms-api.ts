/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateHotelRoomDto } from '../models';
// @ts-ignore
import type { HotelRoom } from '../models';
// @ts-ignore
import type { HotelRoomPaginationResultDto } from '../models';
// @ts-ignore
import type { ImmediateDeleteRoomsDto } from '../models';
// @ts-ignore
import type { ResponseWithMessage } from '../models';
// @ts-ignore
import type { UpdateHotelRoomDto } from '../models';
/**
 * RoomsApi - axios parameter creator
 * @export
 */
export const RoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateHotelRoomDto} createHotelRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerCreate: async (createHotelRoomDto: CreateHotelRoomDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createHotelRoomDto' is not null or undefined
            assertParamExists('roomControllerCreate', 'createHotelRoomDto', createHotelRoomDto)
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHotelRoomDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all soft-deleted rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindDeleted: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all rooms with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterHotelRoomDto
         * @param {string} [sort] JSON string of SortHotelRoomDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindMany: async (page?: number, pageSize?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ADMIN - STAFF Get all rooms by branch ID
         * @param {string} branchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindManyByBranchId: async (branchId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'branchId' is not null or undefined
            assertParamExists('roomControllerFindManyByBranchId', 'branchId', branchId)
            const localVarPath = `/api/rooms/in-branch/{branchId}`
                .replace(`{${"branchId"}}`, encodeURIComponent(String(branchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a room by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomControllerFindOne', 'id', id)
            const localVarPath = `/api/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ADMIN - Delete rooms permanently
         * @param {ImmediateDeleteRoomsDto} immediateDeleteRoomsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerPermanentDelete: async (immediateDeleteRoomsDto: ImmediateDeleteRoomsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'immediateDeleteRoomsDto' is not null or undefined
            assertParamExists('roomControllerPermanentDelete', 'immediateDeleteRoomsDto', immediateDeleteRoomsDto)
            const localVarPath = `/api/rooms/permanent-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(immediateDeleteRoomsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete a room
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomControllerRemove', 'id', id)
            const localVarPath = `/api/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore a soft-deleted room
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerRestore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomControllerRestore', 'id', id)
            const localVarPath = `/api/rooms/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a room
         * @param {string} id 
         * @param {UpdateHotelRoomDto} updateHotelRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerUpdate: async (id: string, updateHotelRoomDto: UpdateHotelRoomDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomControllerUpdate', 'id', id)
            // verify required parameter 'updateHotelRoomDto' is not null or undefined
            assertParamExists('roomControllerUpdate', 'updateHotelRoomDto', updateHotelRoomDto)
            const localVarPath = `/api/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHotelRoomDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomsApi - functional programming interface
 * @export
 */
export const RoomsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateHotelRoomDto} createHotelRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerCreate(createHotelRoomDto: CreateHotelRoomDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerCreate(createHotelRoomDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all soft-deleted rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HotelRoom>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerFindDeleted(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerFindDeleted']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all rooms with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterHotelRoomDto
         * @param {string} [sort] JSON string of SortHotelRoomDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoomPaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerFindMany(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerFindMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ADMIN - STAFF Get all rooms by branch ID
         * @param {string} branchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerFindManyByBranchId(branchId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HotelRoom>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerFindManyByBranchId(branchId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerFindManyByBranchId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a room by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ADMIN - Delete rooms permanently
         * @param {ImmediateDeleteRoomsDto} immediateDeleteRoomsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerPermanentDelete(immediateDeleteRoomsDto: ImmediateDeleteRoomsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerPermanentDelete(immediateDeleteRoomsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerPermanentDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Soft delete a room
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore a soft-deleted room
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerRestore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerRestore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a room
         * @param {string} id 
         * @param {UpdateHotelRoomDto} updateHotelRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomControllerUpdate(id: string, updateHotelRoomDto: UpdateHotelRoomDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomControllerUpdate(id, updateHotelRoomDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomsApi.roomControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoomsApi - factory interface
 * @export
 */
export const RoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new room
         * @param {RoomsApiRoomControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerCreate(requestParameters: RoomsApiRoomControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoom> {
            return localVarFp.roomControllerCreate(requestParameters.createHotelRoomDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all soft-deleted rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<HotelRoom>> {
            return localVarFp.roomControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all rooms with pagination and filters
         * @param {RoomsApiRoomControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindMany(requestParameters: RoomsApiRoomControllerFindManyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoomPaginationResultDto> {
            return localVarFp.roomControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ADMIN - STAFF Get all rooms by branch ID
         * @param {RoomsApiRoomControllerFindManyByBranchIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindManyByBranchId(requestParameters: RoomsApiRoomControllerFindManyByBranchIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<HotelRoom>> {
            return localVarFp.roomControllerFindManyByBranchId(requestParameters.branchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a room by id
         * @param {RoomsApiRoomControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerFindOne(requestParameters: RoomsApiRoomControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoom> {
            return localVarFp.roomControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ADMIN - Delete rooms permanently
         * @param {RoomsApiRoomControllerPermanentDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerPermanentDelete(requestParameters: RoomsApiRoomControllerPermanentDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.roomControllerPermanentDelete(requestParameters.immediateDeleteRoomsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete a room
         * @param {RoomsApiRoomControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerRemove(requestParameters: RoomsApiRoomControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.roomControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore a soft-deleted room
         * @param {RoomsApiRoomControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerRestore(requestParameters: RoomsApiRoomControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseWithMessage> {
            return localVarFp.roomControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a room
         * @param {RoomsApiRoomControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomControllerUpdate(requestParameters: RoomsApiRoomControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoom> {
            return localVarFp.roomControllerUpdate(requestParameters.id, requestParameters.updateHotelRoomDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for roomControllerCreate operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerCreateRequest
 */
export interface RoomsApiRoomControllerCreateRequest {
    /**
     * 
     * @type {CreateHotelRoomDto}
     * @memberof RoomsApiRoomControllerCreate
     */
    readonly createHotelRoomDto: CreateHotelRoomDto
}

/**
 * Request parameters for roomControllerFindMany operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerFindManyRequest
 */
export interface RoomsApiRoomControllerFindManyRequest {
    /**
     * 
     * @type {number}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterHotelRoomDto
     * @type {string}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly filters?: string

    /**
     * JSON string of SortHotelRoomDto[]
     * @type {string}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly sort?: string
}

/**
 * Request parameters for roomControllerFindManyByBranchId operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerFindManyByBranchIdRequest
 */
export interface RoomsApiRoomControllerFindManyByBranchIdRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomsApiRoomControllerFindManyByBranchId
     */
    readonly branchId: string
}

/**
 * Request parameters for roomControllerFindOne operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerFindOneRequest
 */
export interface RoomsApiRoomControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomsApiRoomControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for roomControllerPermanentDelete operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerPermanentDeleteRequest
 */
export interface RoomsApiRoomControllerPermanentDeleteRequest {
    /**
     * 
     * @type {ImmediateDeleteRoomsDto}
     * @memberof RoomsApiRoomControllerPermanentDelete
     */
    readonly immediateDeleteRoomsDto: ImmediateDeleteRoomsDto
}

/**
 * Request parameters for roomControllerRemove operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerRemoveRequest
 */
export interface RoomsApiRoomControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomsApiRoomControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for roomControllerRestore operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerRestoreRequest
 */
export interface RoomsApiRoomControllerRestoreRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomsApiRoomControllerRestore
     */
    readonly id: string
}

/**
 * Request parameters for roomControllerUpdate operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerUpdateRequest
 */
export interface RoomsApiRoomControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomsApiRoomControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateHotelRoomDto}
     * @memberof RoomsApiRoomControllerUpdate
     */
    readonly updateHotelRoomDto: UpdateHotelRoomDto
}

/**
 * RoomsApi - object-oriented interface
 * @export
 * @class RoomsApi
 * @extends {BaseAPI}
 */
export class RoomsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new room
     * @param {RoomsApiRoomControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerCreate(requestParameters: RoomsApiRoomControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerCreate(requestParameters.createHotelRoomDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all soft-deleted rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerFindDeleted(options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all rooms with pagination and filters
     * @param {RoomsApiRoomControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerFindMany(requestParameters: RoomsApiRoomControllerFindManyRequest = {}, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ADMIN - STAFF Get all rooms by branch ID
     * @param {RoomsApiRoomControllerFindManyByBranchIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerFindManyByBranchId(requestParameters: RoomsApiRoomControllerFindManyByBranchIdRequest, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerFindManyByBranchId(requestParameters.branchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a room by id
     * @param {RoomsApiRoomControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerFindOne(requestParameters: RoomsApiRoomControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ADMIN - Delete rooms permanently
     * @param {RoomsApiRoomControllerPermanentDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerPermanentDelete(requestParameters: RoomsApiRoomControllerPermanentDeleteRequest, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerPermanentDelete(requestParameters.immediateDeleteRoomsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete a room
     * @param {RoomsApiRoomControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerRemove(requestParameters: RoomsApiRoomControllerRemoveRequest, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore a soft-deleted room
     * @param {RoomsApiRoomControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerRestore(requestParameters: RoomsApiRoomControllerRestoreRequest, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a room
     * @param {RoomsApiRoomControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomControllerUpdate(requestParameters: RoomsApiRoomControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomControllerUpdate(requestParameters.id, requestParameters.updateHotelRoomDto, options).then((request) => request(this.axios, this.basePath));
    }
}

