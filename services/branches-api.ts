/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Branch } from '../models';
// @ts-ignore
import type { BranchDetail } from '../models';
// @ts-ignore
import type { BranchesInfinitePaginationResultDto } from '../models';
// @ts-ignore
import type { BranchesPaginationResultDto } from '../models';
// @ts-ignore
import type { CreateBranchDto } from '../models';
// @ts-ignore
import type { UpdateBranchDto } from '../models';
/**
 * BranchesApi - axios parameter creator
 * @export
 */
export const BranchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new branch
         * @param {CreateBranchDto} createBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerCreate: async (createBranchDto: CreateBranchDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBranchDto' is not null or undefined
            assertParamExists('branchControllerCreate', 'createBranchDto', createBranchDto)
            const localVarPath = `/api/branches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBranchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all soft-deleted branches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindDeleted: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/branches/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all branches with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindMany: async (page?: number, pageSize?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/branches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get branches with infinite scroll for client app
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindManyInfinite: async (page?: number, pageSize?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/branches/infinite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get branch by ID or slug
         * @param {string} idOrSlug 
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindOne: async (idOrSlug: string, acceptLanguage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrSlug' is not null or undefined
            assertParamExists('branchControllerFindOne', 'idOrSlug', idOrSlug)
            const localVarPath = `/api/branches/{idOrSlug}`
                .replace(`{${"idOrSlug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get latest branches
         * @param {number} [limit] Number of branches to get
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerGetLatestBranches: async (limit?: number, acceptLanguage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/branches/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('branchControllerRemove', 'id', id)
            const localVarPath = `/api/branches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore a soft-deleted branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRestore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('branchControllerRestore', 'id', id)
            const localVarPath = `/api/branches/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a branch
         * @param {string} id 
         * @param {UpdateBranchDto} updateBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerUpdate: async (id: string, updateBranchDto: UpdateBranchDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('branchControllerUpdate', 'id', id)
            // verify required parameter 'updateBranchDto' is not null or undefined
            assertParamExists('branchControllerUpdate', 'updateBranchDto', updateBranchDto)
            const localVarPath = `/api/branches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBranchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BranchesApi - functional programming interface
 * @export
 */
export const BranchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BranchesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new branch
         * @param {CreateBranchDto} createBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerCreate(createBranchDto: CreateBranchDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerCreate(createBranchDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all soft-deleted branches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Branch>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerFindDeleted(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerFindDeleted']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all branches with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchesPaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerFindMany(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerFindMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get branches with infinite scroll for client app
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerFindManyInfinite(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchesInfinitePaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerFindManyInfinite(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerFindManyInfinite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get branch by ID or slug
         * @param {string} idOrSlug 
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerFindOne(idOrSlug: string, acceptLanguage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerFindOne(idOrSlug, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get latest branches
         * @param {number} [limit] Number of branches to get
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerGetLatestBranches(limit?: number, acceptLanguage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Branch>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerGetLatestBranches(limit, acceptLanguage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerGetLatestBranches']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore a soft-deleted branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerRestore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerRestore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a branch
         * @param {string} id 
         * @param {UpdateBranchDto} updateBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchControllerUpdate(id: string, updateBranchDto: UpdateBranchDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchControllerUpdate(id, updateBranchDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BranchesApi.branchControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BranchesApi - factory interface
 * @export
 */
export const BranchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BranchesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new branch
         * @param {BranchesApiBranchControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerCreate(requestParameters: BranchesApiBranchControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Branch> {
            return localVarFp.branchControllerCreate(requestParameters.createBranchDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all soft-deleted branches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<Branch>> {
            return localVarFp.branchControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all branches with pagination and filters
         * @param {BranchesApiBranchControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindMany(requestParameters: BranchesApiBranchControllerFindManyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BranchesPaginationResultDto> {
            return localVarFp.branchControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get branches with infinite scroll for client app
         * @param {BranchesApiBranchControllerFindManyInfiniteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindManyInfinite(requestParameters: BranchesApiBranchControllerFindManyInfiniteRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BranchesInfinitePaginationResultDto> {
            return localVarFp.branchControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get branch by ID or slug
         * @param {BranchesApiBranchControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindOne(requestParameters: BranchesApiBranchControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<BranchDetail> {
            return localVarFp.branchControllerFindOne(requestParameters.idOrSlug, requestParameters.acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get latest branches
         * @param {BranchesApiBranchControllerGetLatestBranchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerGetLatestBranches(requestParameters: BranchesApiBranchControllerGetLatestBranchesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Branch>> {
            return localVarFp.branchControllerGetLatestBranches(requestParameters.limit, requestParameters.acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a branch
         * @param {BranchesApiBranchControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRemove(requestParameters: BranchesApiBranchControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.branchControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore a soft-deleted branch
         * @param {BranchesApiBranchControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRestore(requestParameters: BranchesApiBranchControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.branchControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a branch
         * @param {BranchesApiBranchControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerUpdate(requestParameters: BranchesApiBranchControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Branch> {
            return localVarFp.branchControllerUpdate(requestParameters.id, requestParameters.updateBranchDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for branchControllerCreate operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerCreateRequest
 */
export interface BranchesApiBranchControllerCreateRequest {
    /**
     * 
     * @type {CreateBranchDto}
     * @memberof BranchesApiBranchControllerCreate
     */
    readonly createBranchDto: CreateBranchDto
}

/**
 * Request parameters for branchControllerFindMany operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerFindManyRequest
 */
export interface BranchesApiBranchControllerFindManyRequest {
    /**
     * 
     * @type {number}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterBranchesDto
     * @type {string}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly filters?: string

    /**
     * JSON string of SortBranchDto[]
     * @type {string}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly sort?: string
}

/**
 * Request parameters for branchControllerFindManyInfinite operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerFindManyInfiniteRequest
 */
export interface BranchesApiBranchControllerFindManyInfiniteRequest {
    /**
     * 
     * @type {number}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterBranchesDto
     * @type {string}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly filters?: string

    /**
     * JSON string of SortBranchDto[]
     * @type {string}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly sort?: string
}

/**
 * Request parameters for branchControllerFindOne operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerFindOneRequest
 */
export interface BranchesApiBranchControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof BranchesApiBranchControllerFindOne
     */
    readonly idOrSlug: string

    /**
     * Language preference (en, vi)
     * @type {string}
     * @memberof BranchesApiBranchControllerFindOne
     */
    readonly acceptLanguage?: string
}

/**
 * Request parameters for branchControllerGetLatestBranches operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerGetLatestBranchesRequest
 */
export interface BranchesApiBranchControllerGetLatestBranchesRequest {
    /**
     * Number of branches to get
     * @type {number}
     * @memberof BranchesApiBranchControllerGetLatestBranches
     */
    readonly limit?: number

    /**
     * Language preference (en, vi)
     * @type {string}
     * @memberof BranchesApiBranchControllerGetLatestBranches
     */
    readonly acceptLanguage?: string
}

/**
 * Request parameters for branchControllerRemove operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerRemoveRequest
 */
export interface BranchesApiBranchControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof BranchesApiBranchControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for branchControllerRestore operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerRestoreRequest
 */
export interface BranchesApiBranchControllerRestoreRequest {
    /**
     * 
     * @type {string}
     * @memberof BranchesApiBranchControllerRestore
     */
    readonly id: string
}

/**
 * Request parameters for branchControllerUpdate operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerUpdateRequest
 */
export interface BranchesApiBranchControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof BranchesApiBranchControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateBranchDto}
     * @memberof BranchesApiBranchControllerUpdate
     */
    readonly updateBranchDto: UpdateBranchDto
}

/**
 * BranchesApi - object-oriented interface
 * @export
 * @class BranchesApi
 * @extends {BaseAPI}
 */
export class BranchesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new branch
     * @param {BranchesApiBranchControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerCreate(requestParameters: BranchesApiBranchControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerCreate(requestParameters.createBranchDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all soft-deleted branches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerFindDeleted(options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all branches with pagination and filters
     * @param {BranchesApiBranchControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerFindMany(requestParameters: BranchesApiBranchControllerFindManyRequest = {}, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get branches with infinite scroll for client app
     * @param {BranchesApiBranchControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerFindManyInfinite(requestParameters: BranchesApiBranchControllerFindManyInfiniteRequest = {}, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get branch by ID or slug
     * @param {BranchesApiBranchControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerFindOne(requestParameters: BranchesApiBranchControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerFindOne(requestParameters.idOrSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get latest branches
     * @param {BranchesApiBranchControllerGetLatestBranchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerGetLatestBranches(requestParameters: BranchesApiBranchControllerGetLatestBranchesRequest = {}, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerGetLatestBranches(requestParameters.limit, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a branch
     * @param {BranchesApiBranchControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerRemove(requestParameters: BranchesApiBranchControllerRemoveRequest, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore a soft-deleted branch
     * @param {BranchesApiBranchControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerRestore(requestParameters: BranchesApiBranchControllerRestoreRequest, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a branch
     * @param {BranchesApiBranchControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public branchControllerUpdate(requestParameters: BranchesApiBranchControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return BranchesApiFp(this.configuration).branchControllerUpdate(requestParameters.id, requestParameters.updateBranchDto, options).then((request) => request(this.axios, this.basePath));
    }
}

