/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { VerifyCodeDto } from '../models';
// @ts-ignore
import type { VerifyCodeResponseDto } from '../models';
// @ts-ignore
import type { VerifyEmailOTP } from '../models';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Verify a code
         * @param {VerifyCodeDto} verifyCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerVerifyCode: async (verifyCodeDto: VerifyCodeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyCodeDto' is not null or undefined
            assertParamExists('verificationControllerVerifyCode', 'verifyCodeDto', verifyCodeDto)
            const localVarPath = `/api/verification/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyCodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify an email OTP
         * @param {VerifyEmailOTP} verifyEmailOTP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerVerifyEmailOTP: async (verifyEmailOTP: VerifyEmailOTP, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailOTP' is not null or undefined
            assertParamExists('verificationControllerVerifyEmailOTP', 'verifyEmailOTP', verifyEmailOTP)
            const localVarPath = `/api/verification/verify-email-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailOTP, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Verify a code
         * @param {VerifyCodeDto} verifyCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationControllerVerifyCode(verifyCodeDto: VerifyCodeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyCodeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationControllerVerifyCode(verifyCodeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerificationApi.verificationControllerVerifyCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify an email OTP
         * @param {VerifyEmailOTP} verifyEmailOTP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationControllerVerifyEmailOTP(verifyEmailOTP: VerifyEmailOTP, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyCodeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationControllerVerifyEmailOTP(verifyEmailOTP, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerificationApi.verificationControllerVerifyEmailOTP']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Verify a code
         * @param {VerificationApiVerificationControllerVerifyCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerVerifyCode(requestParameters: VerificationApiVerificationControllerVerifyCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerifyCodeResponseDto> {
            return localVarFp.verificationControllerVerifyCode(requestParameters.verifyCodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify an email OTP
         * @param {VerificationApiVerificationControllerVerifyEmailOTPRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerVerifyEmailOTP(requestParameters: VerificationApiVerificationControllerVerifyEmailOTPRequest, options?: RawAxiosRequestConfig): AxiosPromise<VerifyCodeResponseDto> {
            return localVarFp.verificationControllerVerifyEmailOTP(requestParameters.verifyEmailOTP, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for verificationControllerVerifyCode operation in VerificationApi.
 * @export
 * @interface VerificationApiVerificationControllerVerifyCodeRequest
 */
export interface VerificationApiVerificationControllerVerifyCodeRequest {
    /**
     * 
     * @type {VerifyCodeDto}
     * @memberof VerificationApiVerificationControllerVerifyCode
     */
    readonly verifyCodeDto: VerifyCodeDto
}

/**
 * Request parameters for verificationControllerVerifyEmailOTP operation in VerificationApi.
 * @export
 * @interface VerificationApiVerificationControllerVerifyEmailOTPRequest
 */
export interface VerificationApiVerificationControllerVerifyEmailOTPRequest {
    /**
     * 
     * @type {VerifyEmailOTP}
     * @memberof VerificationApiVerificationControllerVerifyEmailOTP
     */
    readonly verifyEmailOTP: VerifyEmailOTP
}

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * 
     * @summary Verify a code
     * @param {VerificationApiVerificationControllerVerifyCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public verificationControllerVerifyCode(requestParameters: VerificationApiVerificationControllerVerifyCodeRequest, options?: RawAxiosRequestConfig) {
        return VerificationApiFp(this.configuration).verificationControllerVerifyCode(requestParameters.verifyCodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify an email OTP
     * @param {VerificationApiVerificationControllerVerifyEmailOTPRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public verificationControllerVerifyEmailOTP(requestParameters: VerificationApiVerificationControllerVerifyEmailOTPRequest, options?: RawAxiosRequestConfig) {
        return VerificationApiFp(this.configuration).verificationControllerVerifyEmailOTP(requestParameters.verifyEmailOTP, options).then((request) => request(this.axios, this.basePath));
    }
}

