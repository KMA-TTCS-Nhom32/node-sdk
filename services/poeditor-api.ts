/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddTranslationDto } from '../models';
// @ts-ignore
import type { GetTranslationsRequestDto } from '../models';
// @ts-ignore
import type { ListTranslationResponseDto } from '../models';
/**
 * POEditorApi - axios parameter creator
 * @export
 */
export const POEditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add translations to POEditor project
         * @param {AddTranslationDto} addTranslationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerAddTranslation: async (addTranslationDto: AddTranslationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addTranslationDto' is not null or undefined
            assertParamExists('poeditorControllerAddTranslation', 'addTranslationDto', addTranslationDto)
            const localVarPath = `/api/poeditor/translations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTranslationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get translations from POEditor project
         * @param {GetTranslationsRequestDto} getTranslationsRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerGetTranslations: async (getTranslationsRequestDto: GetTranslationsRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getTranslationsRequestDto' is not null or undefined
            assertParamExists('poeditorControllerGetTranslations', 'getTranslationsRequestDto', getTranslationsRequestDto)
            const localVarPath = `/api/poeditor/translations-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getTranslationsRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * POEditorApi - functional programming interface
 * @export
 */
export const POEditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = POEditorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add translations to POEditor project
         * @param {AddTranslationDto} addTranslationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async poeditorControllerAddTranslation(addTranslationDto: AddTranslationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.poeditorControllerAddTranslation(addTranslationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['POEditorApi.poeditorControllerAddTranslation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get translations from POEditor project
         * @param {GetTranslationsRequestDto} getTranslationsRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async poeditorControllerGetTranslations(getTranslationsRequestDto: GetTranslationsRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTranslationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.poeditorControllerGetTranslations(getTranslationsRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['POEditorApi.poeditorControllerGetTranslations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * POEditorApi - factory interface
 * @export
 */
export const POEditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = POEditorApiFp(configuration)
    return {
        /**
         * 
         * @summary Add translations to POEditor project
         * @param {POEditorApiPoeditorControllerAddTranslationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerAddTranslation(requestParameters: POEditorApiPoeditorControllerAddTranslationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.poeditorControllerAddTranslation(requestParameters.addTranslationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get translations from POEditor project
         * @param {POEditorApiPoeditorControllerGetTranslationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerGetTranslations(requestParameters: POEditorApiPoeditorControllerGetTranslationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListTranslationResponseDto> {
            return localVarFp.poeditorControllerGetTranslations(requestParameters.getTranslationsRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for poeditorControllerAddTranslation operation in POEditorApi.
 * @export
 * @interface POEditorApiPoeditorControllerAddTranslationRequest
 */
export interface POEditorApiPoeditorControllerAddTranslationRequest {
    /**
     * 
     * @type {AddTranslationDto}
     * @memberof POEditorApiPoeditorControllerAddTranslation
     */
    readonly addTranslationDto: AddTranslationDto
}

/**
 * Request parameters for poeditorControllerGetTranslations operation in POEditorApi.
 * @export
 * @interface POEditorApiPoeditorControllerGetTranslationsRequest
 */
export interface POEditorApiPoeditorControllerGetTranslationsRequest {
    /**
     * 
     * @type {GetTranslationsRequestDto}
     * @memberof POEditorApiPoeditorControllerGetTranslations
     */
    readonly getTranslationsRequestDto: GetTranslationsRequestDto
}

/**
 * POEditorApi - object-oriented interface
 * @export
 * @class POEditorApi
 * @extends {BaseAPI}
 */
export class POEditorApi extends BaseAPI {
    /**
     * 
     * @summary Add translations to POEditor project
     * @param {POEditorApiPoeditorControllerAddTranslationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POEditorApi
     */
    public poeditorControllerAddTranslation(requestParameters: POEditorApiPoeditorControllerAddTranslationRequest, options?: RawAxiosRequestConfig) {
        return POEditorApiFp(this.configuration).poeditorControllerAddTranslation(requestParameters.addTranslationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get translations from POEditor project
     * @param {POEditorApiPoeditorControllerGetTranslationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POEditorApi
     */
    public poeditorControllerGetTranslations(requestParameters: POEditorApiPoeditorControllerGetTranslationsRequest, options?: RawAxiosRequestConfig) {
        return POEditorApiFp(this.configuration).poeditorControllerGetTranslations(requestParameters.getTranslationsRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

