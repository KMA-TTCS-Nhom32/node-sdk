/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateRoomDetailDto } from '../models';
// @ts-ignore
import type { RoomDetail } from '../models';
// @ts-ignore
import type { RoomDetailInfinitePaginationResultDto } from '../models';
// @ts-ignore
import type { RoomDetailPaginationResultDto } from '../models';
// @ts-ignore
import type { UpdateRoomDetailDto } from '../models';
/**
 * RoomDetailsApi - axios parameter creator
 * @export
 */
export const RoomDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new room detail
         * @param {CreateRoomDetailDto} createRoomDetailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerCreate: async (createRoomDetailDto: CreateRoomDetailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoomDetailDto' is not null or undefined
            assertParamExists('roomDetailControllerCreate', 'createRoomDetailDto', createRoomDetailDto)
            const localVarPath = `/api/room-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomDetailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all soft-deleted room details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindDeleted: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room-details/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all room details with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindMany: async (page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all room details with infinite pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindManyInfinite: async (page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room-details/infinite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a room detail by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerFindOne', 'id', id)
            const localVarPath = `/api/room-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete a room detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerRemove', 'id', id)
            const localVarPath = `/api/room-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore a soft-deleted room detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRestore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerRestore', 'id', id)
            const localVarPath = `/api/room-details/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a room detail
         * @param {string} id 
         * @param {UpdateRoomDetailDto} updateRoomDetailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerUpdate: async (id: string, updateRoomDetailDto: UpdateRoomDetailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerUpdate', 'id', id)
            // verify required parameter 'updateRoomDetailDto' is not null or undefined
            assertParamExists('roomDetailControllerUpdate', 'updateRoomDetailDto', updateRoomDetailDto)
            const localVarPath = `/api/room-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoomDetailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomDetailsApi - functional programming interface
 * @export
 */
export const RoomDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new room detail
         * @param {CreateRoomDetailDto} createRoomDetailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerCreate(createRoomDetailDto: CreateRoomDetailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerCreate(createRoomDetailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all soft-deleted room details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerFindDeleted(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerFindDeleted']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all room details with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetailPaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerFindMany(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerFindMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all room details with infinite pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerFindManyInfinite(page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetailInfinitePaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerFindManyInfinite(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerFindManyInfinite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a room detail by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Soft delete a room detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore a soft-deleted room detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerRestore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerRestore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a room detail
         * @param {string} id 
         * @param {UpdateRoomDetailDto} updateRoomDetailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomDetailControllerUpdate(id: string, updateRoomDetailDto: UpdateRoomDetailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomDetailControllerUpdate(id, updateRoomDetailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoomDetailsApi.roomDetailControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoomDetailsApi - factory interface
 * @export
 */
export const RoomDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomDetailsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new room detail
         * @param {RoomDetailsApiRoomDetailControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerCreate(requestParameters: RoomDetailsApiRoomDetailControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail> {
            return localVarFp.roomDetailControllerCreate(requestParameters.createRoomDetailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all soft-deleted room details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoomDetail>> {
            return localVarFp.roomDetailControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all room details with pagination and filters
         * @param {RoomDetailsApiRoomDetailControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindMany(requestParameters: RoomDetailsApiRoomDetailControllerFindManyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetailPaginationResultDto> {
            return localVarFp.roomDetailControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all room details with infinite pagination and filters
         * @param {RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindManyInfinite(requestParameters: RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetailInfinitePaginationResultDto> {
            return localVarFp.roomDetailControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a room detail by id
         * @param {RoomDetailsApiRoomDetailControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindOne(requestParameters: RoomDetailsApiRoomDetailControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail> {
            return localVarFp.roomDetailControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete a room detail
         * @param {RoomDetailsApiRoomDetailControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRemove(requestParameters: RoomDetailsApiRoomDetailControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.roomDetailControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore a soft-deleted room detail
         * @param {RoomDetailsApiRoomDetailControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRestore(requestParameters: RoomDetailsApiRoomDetailControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail> {
            return localVarFp.roomDetailControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a room detail
         * @param {RoomDetailsApiRoomDetailControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerUpdate(requestParameters: RoomDetailsApiRoomDetailControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail> {
            return localVarFp.roomDetailControllerUpdate(requestParameters.id, requestParameters.updateRoomDetailDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for roomDetailControllerCreate operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerCreateRequest
 */
export interface RoomDetailsApiRoomDetailControllerCreateRequest {
    /**
     * 
     * @type {CreateRoomDetailDto}
     * @memberof RoomDetailsApiRoomDetailControllerCreate
     */
    readonly createRoomDetailDto: CreateRoomDetailDto
}

/**
 * Request parameters for roomDetailControllerFindMany operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerFindManyRequest
 */
export interface RoomDetailsApiRoomDetailControllerFindManyRequest {
    /**
     * 
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterRoomDetailDto
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly filters?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for roomDetailControllerFindManyInfinite operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest
 */
export interface RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest {
    /**
     * 
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterRoomDetailDto
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly filters?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for roomDetailControllerFindOne operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerFindOneRequest
 */
export interface RoomDetailsApiRoomDetailControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for roomDetailControllerRemove operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerRemoveRequest
 */
export interface RoomDetailsApiRoomDetailControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for roomDetailControllerRestore operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerRestoreRequest
 */
export interface RoomDetailsApiRoomDetailControllerRestoreRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerRestore
     */
    readonly id: string
}

/**
 * Request parameters for roomDetailControllerUpdate operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerUpdateRequest
 */
export interface RoomDetailsApiRoomDetailControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateRoomDetailDto}
     * @memberof RoomDetailsApiRoomDetailControllerUpdate
     */
    readonly updateRoomDetailDto: UpdateRoomDetailDto
}

/**
 * RoomDetailsApi - object-oriented interface
 * @export
 * @class RoomDetailsApi
 * @extends {BaseAPI}
 */
export class RoomDetailsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new room detail
     * @param {RoomDetailsApiRoomDetailControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerCreate(requestParameters: RoomDetailsApiRoomDetailControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerCreate(requestParameters.createRoomDetailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all soft-deleted room details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerFindDeleted(options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all room details with pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerFindMany(requestParameters: RoomDetailsApiRoomDetailControllerFindManyRequest = {}, options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all room details with infinite pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerFindManyInfinite(requestParameters: RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest = {}, options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a room detail by id
     * @param {RoomDetailsApiRoomDetailControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerFindOne(requestParameters: RoomDetailsApiRoomDetailControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete a room detail
     * @param {RoomDetailsApiRoomDetailControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerRemove(requestParameters: RoomDetailsApiRoomDetailControllerRemoveRequest, options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore a soft-deleted room detail
     * @param {RoomDetailsApiRoomDetailControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerRestore(requestParameters: RoomDetailsApiRoomDetailControllerRestoreRequest, options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a room detail
     * @param {RoomDetailsApiRoomDetailControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    public roomDetailControllerUpdate(requestParameters: RoomDetailsApiRoomDetailControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerUpdate(requestParameters.id, requestParameters.updateRoomDetailDto, options).then((request) => request(this.axios, this.basePath));
    }
}

