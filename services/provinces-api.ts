/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateProvinceDto } from '../models';
// @ts-ignore
import type { Province } from '../models';
// @ts-ignore
import type { ProvincePaginationResultDto } from '../models';
// @ts-ignore
import type { UpdateProvinceDto } from '../models';
/**
 * ProvincesApi - axios parameter creator
 * @export
 */
export const ProvincesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new province
         * @param {CreateProvinceDto} createProvinceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerCreate: async (createProvinceDto: CreateProvinceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProvinceDto' is not null or undefined
            assertParamExists('provincesControllerCreate', 'createProvinceDto', createProvinceDto)
            const localVarPath = `/api/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProvinceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all soft-deleted provinces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindDeleted: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/provinces/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all provinces with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterProvincesDto
         * @param {string} [sort] JSON string of SortProvinceDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindMany: async (page?: number, pageSize?: number, filters?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get province by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerFindOne', 'id', id)
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a province
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerRemove', 'id', id)
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore a soft-deleted province
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRestore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerRestore', 'id', id)
            const localVarPath = `/api/provinces/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a province
         * @param {string} id 
         * @param {UpdateProvinceDto} updateProvinceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerUpdate: async (id: string, updateProvinceDto: UpdateProvinceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerUpdate', 'id', id)
            // verify required parameter 'updateProvinceDto' is not null or undefined
            assertParamExists('provincesControllerUpdate', 'updateProvinceDto', updateProvinceDto)
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProvinceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvincesApi - functional programming interface
 * @export
 */
export const ProvincesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvincesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new province
         * @param {CreateProvinceDto} createProvinceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provincesControllerCreate(createProvinceDto: CreateProvinceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provincesControllerCreate(createProvinceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvincesApi.provincesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all soft-deleted provinces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provincesControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Province>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provincesControllerFindDeleted(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvincesApi.provincesControllerFindDeleted']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all provinces with pagination and filters
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [filters] JSON string of FilterProvincesDto
         * @param {string} [sort] JSON string of SortProvinceDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provincesControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvincePaginationResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provincesControllerFindMany(page, pageSize, filters, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvincesApi.provincesControllerFindMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get province by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provincesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provincesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvincesApi.provincesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a province
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provincesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provincesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvincesApi.provincesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore a soft-deleted province
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provincesControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provincesControllerRestore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvincesApi.provincesControllerRestore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a province
         * @param {string} id 
         * @param {UpdateProvinceDto} updateProvinceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async provincesControllerUpdate(id: string, updateProvinceDto: UpdateProvinceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.provincesControllerUpdate(id, updateProvinceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProvincesApi.provincesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProvincesApi - factory interface
 * @export
 */
export const ProvincesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvincesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new province
         * @param {ProvincesApiProvincesControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerCreate(requestParameters: ProvincesApiProvincesControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province> {
            return localVarFp.provincesControllerCreate(requestParameters.createProvinceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all soft-deleted provinces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<Province>> {
            return localVarFp.provincesControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all provinces with pagination and filters
         * @param {ProvincesApiProvincesControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindMany(requestParameters: ProvincesApiProvincesControllerFindManyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProvincePaginationResultDto> {
            return localVarFp.provincesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get province by ID
         * @param {ProvincesApiProvincesControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindOne(requestParameters: ProvincesApiProvincesControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province> {
            return localVarFp.provincesControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a province
         * @param {ProvincesApiProvincesControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRemove(requestParameters: ProvincesApiProvincesControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.provincesControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore a soft-deleted province
         * @param {ProvincesApiProvincesControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRestore(requestParameters: ProvincesApiProvincesControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province> {
            return localVarFp.provincesControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a province
         * @param {ProvincesApiProvincesControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerUpdate(requestParameters: ProvincesApiProvincesControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province> {
            return localVarFp.provincesControllerUpdate(requestParameters.id, requestParameters.updateProvinceDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for provincesControllerCreate operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerCreateRequest
 */
export interface ProvincesApiProvincesControllerCreateRequest {
    /**
     * 
     * @type {CreateProvinceDto}
     * @memberof ProvincesApiProvincesControllerCreate
     */
    readonly createProvinceDto: CreateProvinceDto
}

/**
 * Request parameters for provincesControllerFindMany operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerFindManyRequest
 */
export interface ProvincesApiProvincesControllerFindManyRequest {
    /**
     * 
     * @type {number}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly pageSize?: number

    /**
     * JSON string of FilterProvincesDto
     * @type {string}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly filters?: string

    /**
     * JSON string of SortProvinceDto[]
     * @type {string}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly sort?: string
}

/**
 * Request parameters for provincesControllerFindOne operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerFindOneRequest
 */
export interface ProvincesApiProvincesControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvincesApiProvincesControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for provincesControllerRemove operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerRemoveRequest
 */
export interface ProvincesApiProvincesControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvincesApiProvincesControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for provincesControllerRestore operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerRestoreRequest
 */
export interface ProvincesApiProvincesControllerRestoreRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvincesApiProvincesControllerRestore
     */
    readonly id: string
}

/**
 * Request parameters for provincesControllerUpdate operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerUpdateRequest
 */
export interface ProvincesApiProvincesControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ProvincesApiProvincesControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateProvinceDto}
     * @memberof ProvincesApiProvincesControllerUpdate
     */
    readonly updateProvinceDto: UpdateProvinceDto
}

/**
 * ProvincesApi - object-oriented interface
 * @export
 * @class ProvincesApi
 * @extends {BaseAPI}
 */
export class ProvincesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new province
     * @param {ProvincesApiProvincesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    public provincesControllerCreate(requestParameters: ProvincesApiProvincesControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return ProvincesApiFp(this.configuration).provincesControllerCreate(requestParameters.createProvinceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all soft-deleted provinces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    public provincesControllerFindDeleted(options?: RawAxiosRequestConfig) {
        return ProvincesApiFp(this.configuration).provincesControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all provinces with pagination and filters
     * @param {ProvincesApiProvincesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    public provincesControllerFindMany(requestParameters: ProvincesApiProvincesControllerFindManyRequest = {}, options?: RawAxiosRequestConfig) {
        return ProvincesApiFp(this.configuration).provincesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get province by ID
     * @param {ProvincesApiProvincesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    public provincesControllerFindOne(requestParameters: ProvincesApiProvincesControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return ProvincesApiFp(this.configuration).provincesControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a province
     * @param {ProvincesApiProvincesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    public provincesControllerRemove(requestParameters: ProvincesApiProvincesControllerRemoveRequest, options?: RawAxiosRequestConfig) {
        return ProvincesApiFp(this.configuration).provincesControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore a soft-deleted province
     * @param {ProvincesApiProvincesControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    public provincesControllerRestore(requestParameters: ProvincesApiProvincesControllerRestoreRequest, options?: RawAxiosRequestConfig) {
        return ProvincesApiFp(this.configuration).provincesControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a province
     * @param {ProvincesApiProvincesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    public provincesControllerUpdate(requestParameters: ProvincesApiProvincesControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return ProvincesApiFp(this.configuration).provincesControllerUpdate(requestParameters.id, requestParameters.updateProvinceDto, options).then((request) => request(this.axios, this.basePath));
    }
}

