/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * PayOSApi - axios parameter creator
 * @export
 */
export const PayOSApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Cancel a payment link
         * @param {CancelPaymentRequestDto} cancelPaymentRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCancelPayment: (cancelPaymentRequestDto_1, ...args_1) => __awaiter(this, [cancelPaymentRequestDto_1, ...args_1], void 0, function* (cancelPaymentRequestDto, options = {}) {
            // verify required parameter 'cancelPaymentRequestDto' is not null or undefined
            assertParamExists('payosControllerCancelPayment', 'cancelPaymentRequestDto', cancelPaymentRequestDto);
            const localVarPath = `/api/payos/cancel-payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(cancelPaymentRequestDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a new payment request
         * @param {CreatePaymentRequestDto} createPaymentRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCreatePaymentRequest: (createPaymentRequestDto_1, ...args_1) => __awaiter(this, [createPaymentRequestDto_1, ...args_1], void 0, function* (createPaymentRequestDto, options = {}) {
            // verify required parameter 'createPaymentRequestDto' is not null or undefined
            assertParamExists('payosControllerCreatePaymentRequest', 'createPaymentRequestDto', createPaymentRequestDto);
            const localVarPath = `/api/payos/payment-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentRequestDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get payment status
         * @param {string} paymentLinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerGetPaymentStatus: (paymentLinkId_1, ...args_1) => __awaiter(this, [paymentLinkId_1, ...args_1], void 0, function* (paymentLinkId, options = {}) {
            // verify required parameter 'paymentLinkId' is not null or undefined
            assertParamExists('payosControllerGetPaymentStatus', 'paymentLinkId', paymentLinkId);
            const localVarPath = `/api/payos/payment-status/{paymentLinkId}`
                .replace(`{${"paymentLinkId"}}`, encodeURIComponent(String(paymentLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Handle payment confirmation webhook
         * @param {ConfirmPaymentWebhookDto} confirmPaymentWebhookDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerHandleWebhook: (confirmPaymentWebhookDto_1, ...args_1) => __awaiter(this, [confirmPaymentWebhookDto_1, ...args_1], void 0, function* (confirmPaymentWebhookDto, options = {}) {
            // verify required parameter 'confirmPaymentWebhookDto' is not null or undefined
            assertParamExists('payosControllerHandleWebhook', 'confirmPaymentWebhookDto', confirmPaymentWebhookDto);
            const localVarPath = `/api/payos/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(confirmPaymentWebhookDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PayOSApi - functional programming interface
 * @export
 */
export const PayOSApiFp = function (configuration) {
    const localVarAxiosParamCreator = PayOSApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Cancel a payment link
         * @param {CancelPaymentRequestDto} cancelPaymentRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCancelPayment(cancelPaymentRequestDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payosControllerCancelPayment(cancelPaymentRequestDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PayOSApi.payosControllerCancelPayment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Create a new payment request
         * @param {CreatePaymentRequestDto} createPaymentRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCreatePaymentRequest(createPaymentRequestDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payosControllerCreatePaymentRequest(createPaymentRequestDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PayOSApi.payosControllerCreatePaymentRequest']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get payment status
         * @param {string} paymentLinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerGetPaymentStatus(paymentLinkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payosControllerGetPaymentStatus(paymentLinkId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PayOSApi.payosControllerGetPaymentStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Handle payment confirmation webhook
         * @param {ConfirmPaymentWebhookDto} confirmPaymentWebhookDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerHandleWebhook(confirmPaymentWebhookDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payosControllerHandleWebhook(confirmPaymentWebhookDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PayOSApi.payosControllerHandleWebhook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * PayOSApi - factory interface
 * @export
 */
export const PayOSApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PayOSApiFp(configuration);
    return {
        /**
         *
         * @summary Cancel a payment link
         * @param {PayOSApiPayosControllerCancelPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCancelPayment(requestParameters, options) {
            return localVarFp.payosControllerCancelPayment(requestParameters.cancelPaymentRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new payment request
         * @param {PayOSApiPayosControllerCreatePaymentRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerCreatePaymentRequest(requestParameters, options) {
            return localVarFp.payosControllerCreatePaymentRequest(requestParameters.createPaymentRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get payment status
         * @param {PayOSApiPayosControllerGetPaymentStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerGetPaymentStatus(requestParameters, options) {
            return localVarFp.payosControllerGetPaymentStatus(requestParameters.paymentLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Handle payment confirmation webhook
         * @param {PayOSApiPayosControllerHandleWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payosControllerHandleWebhook(requestParameters, options) {
            return localVarFp.payosControllerHandleWebhook(requestParameters.confirmPaymentWebhookDto, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PayOSApi - object-oriented interface
 * @export
 * @class PayOSApi
 * @extends {BaseAPI}
 */
export class PayOSApi extends BaseAPI {
    /**
     *
     * @summary Cancel a payment link
     * @param {PayOSApiPayosControllerCancelPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    payosControllerCancelPayment(requestParameters, options) {
        return PayOSApiFp(this.configuration).payosControllerCancelPayment(requestParameters.cancelPaymentRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new payment request
     * @param {PayOSApiPayosControllerCreatePaymentRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    payosControllerCreatePaymentRequest(requestParameters, options) {
        return PayOSApiFp(this.configuration).payosControllerCreatePaymentRequest(requestParameters.createPaymentRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get payment status
     * @param {PayOSApiPayosControllerGetPaymentStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    payosControllerGetPaymentStatus(requestParameters, options) {
        return PayOSApiFp(this.configuration).payosControllerGetPaymentStatus(requestParameters.paymentLinkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Handle payment confirmation webhook
     * @param {PayOSApiPayosControllerHandleWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayOSApi
     */
    payosControllerHandleWebhook(requestParameters, options) {
        return PayOSApiFp(this.configuration).payosControllerHandleWebhook(requestParameters.confirmPaymentWebhookDto, options).then((request) => request(this.axios, this.basePath));
    }
}
