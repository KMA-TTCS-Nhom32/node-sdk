/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { Booking } from '../models';
import type { BookingsPaginationResultDto } from '../models';
import type { CancelBookingDto } from '../models';
import type { CreateBookingAtHotelDto } from '../models';
import type { CreateBookingOnlineDto } from '../models';
import type { UpdateBookingStatusDto } from '../models';
/**
 * BookingApi - axios parameter creator
 * @export
 */
export declare const BookingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancel a booking
     * @param {string} bookingId
     * @param {CancelBookingDto} cancelBookingDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCancelBooking: (bookingId: string, cancelBookingDto: CancelBookingDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new booking directly at the hotel
     * @param {CreateBookingAtHotelDto} createBookingAtHotelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCreateBookingDirectly: (createBookingAtHotelDto: CreateBookingAtHotelDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new booking online
     * @param {CreateBookingOnlineDto} createBookingOnlineDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCreateBookingOnline: (createBookingOnlineDto: CreateBookingOnlineDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get booking details
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerFindById: (bookingId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all bookings with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterBookingsDto
     * @param {string} [sort] JSON string of SortBookingsDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerGetBookings: (page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all my bookings with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] Filter my bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerGetMyBookings: (page?: number, pageSize?: number, filters?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Handle payment webhook from PayOS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerHandlePaymentWebhook: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update booking status
     * @param {string} bookingId
     * @param {UpdateBookingStatusDto} updateBookingStatusDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerUpdateBookingStatus: (bookingId: string, updateBookingStatusDto: UpdateBookingStatusDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BookingApi - functional programming interface
 * @export
 */
export declare const BookingApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancel a booking
     * @param {string} bookingId
     * @param {CancelBookingDto} cancelBookingDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCancelBooking(bookingId: string, cancelBookingDto: CancelBookingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>>;
    /**
     *
     * @summary Create a new booking directly at the hotel
     * @param {CreateBookingAtHotelDto} createBookingAtHotelDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCreateBookingDirectly(createBookingAtHotelDto: CreateBookingAtHotelDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>>;
    /**
     *
     * @summary Create a new booking online
     * @param {CreateBookingOnlineDto} createBookingOnlineDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCreateBookingOnline(createBookingOnlineDto: CreateBookingOnlineDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>>;
    /**
     *
     * @summary Get booking details
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerFindById(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>>;
    /**
     *
     * @summary Get all bookings with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterBookingsDto
     * @param {string} [sort] JSON string of SortBookingsDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerGetBookings(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingsPaginationResultDto>>;
    /**
     *
     * @summary Get all my bookings with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] Filter my bookings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerGetMyBookings(page?: number, pageSize?: number, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingsPaginationResultDto>>;
    /**
     *
     * @summary Handle payment webhook from PayOS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerHandlePaymentWebhook(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update booking status
     * @param {string} bookingId
     * @param {UpdateBookingStatusDto} updateBookingStatusDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerUpdateBookingStatus(bookingId: string, updateBookingStatusDto: UpdateBookingStatusDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Booking>>;
};
/**
 * BookingApi - factory interface
 * @export
 */
export declare const BookingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Cancel a booking
     * @param {BookingApiBookingControllerCancelBookingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCancelBooking(requestParameters: BookingApiBookingControllerCancelBookingRequest, options?: RawAxiosRequestConfig): AxiosPromise<Booking>;
    /**
     *
     * @summary Create a new booking directly at the hotel
     * @param {BookingApiBookingControllerCreateBookingDirectlyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCreateBookingDirectly(requestParameters: BookingApiBookingControllerCreateBookingDirectlyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Booking>;
    /**
     *
     * @summary Create a new booking online
     * @param {BookingApiBookingControllerCreateBookingOnlineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerCreateBookingOnline(requestParameters: BookingApiBookingControllerCreateBookingOnlineRequest, options?: RawAxiosRequestConfig): AxiosPromise<Booking>;
    /**
     *
     * @summary Get booking details
     * @param {BookingApiBookingControllerFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerFindById(requestParameters: BookingApiBookingControllerFindByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Booking>;
    /**
     *
     * @summary Get all bookings with pagination and filters
     * @param {BookingApiBookingControllerGetBookingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerGetBookings(requestParameters?: BookingApiBookingControllerGetBookingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BookingsPaginationResultDto>;
    /**
     *
     * @summary Get all my bookings with pagination and filters
     * @param {BookingApiBookingControllerGetMyBookingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerGetMyBookings(requestParameters?: BookingApiBookingControllerGetMyBookingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BookingsPaginationResultDto>;
    /**
     *
     * @summary Handle payment webhook from PayOS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerHandlePaymentWebhook(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update booking status
     * @param {BookingApiBookingControllerUpdateBookingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bookingControllerUpdateBookingStatus(requestParameters: BookingApiBookingControllerUpdateBookingStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<Booking>;
};
/**
 * Request parameters for bookingControllerCancelBooking operation in BookingApi.
 * @export
 * @interface BookingApiBookingControllerCancelBookingRequest
 */
export interface BookingApiBookingControllerCancelBookingRequest {
    /**
     *
     * @type {string}
     * @memberof BookingApiBookingControllerCancelBooking
     */
    readonly bookingId: string;
    /**
     *
     * @type {CancelBookingDto}
     * @memberof BookingApiBookingControllerCancelBooking
     */
    readonly cancelBookingDto: CancelBookingDto;
}
/**
 * Request parameters for bookingControllerCreateBookingDirectly operation in BookingApi.
 * @export
 * @interface BookingApiBookingControllerCreateBookingDirectlyRequest
 */
export interface BookingApiBookingControllerCreateBookingDirectlyRequest {
    /**
     *
     * @type {CreateBookingAtHotelDto}
     * @memberof BookingApiBookingControllerCreateBookingDirectly
     */
    readonly createBookingAtHotelDto: CreateBookingAtHotelDto;
}
/**
 * Request parameters for bookingControllerCreateBookingOnline operation in BookingApi.
 * @export
 * @interface BookingApiBookingControllerCreateBookingOnlineRequest
 */
export interface BookingApiBookingControllerCreateBookingOnlineRequest {
    /**
     *
     * @type {CreateBookingOnlineDto}
     * @memberof BookingApiBookingControllerCreateBookingOnline
     */
    readonly createBookingOnlineDto: CreateBookingOnlineDto;
}
/**
 * Request parameters for bookingControllerFindById operation in BookingApi.
 * @export
 * @interface BookingApiBookingControllerFindByIdRequest
 */
export interface BookingApiBookingControllerFindByIdRequest {
    /**
     *
     * @type {string}
     * @memberof BookingApiBookingControllerFindById
     */
    readonly bookingId: string;
}
/**
 * Request parameters for bookingControllerGetBookings operation in BookingApi.
 * @export
 * @interface BookingApiBookingControllerGetBookingsRequest
 */
export interface BookingApiBookingControllerGetBookingsRequest {
    /**
     *
     * @type {number}
     * @memberof BookingApiBookingControllerGetBookings
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof BookingApiBookingControllerGetBookings
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterBookingsDto
     * @type {string}
     * @memberof BookingApiBookingControllerGetBookings
     */
    readonly filters?: string;
    /**
     * JSON string of SortBookingsDto[]
     * @type {string}
     * @memberof BookingApiBookingControllerGetBookings
     */
    readonly sort?: string;
}
/**
 * Request parameters for bookingControllerGetMyBookings operation in BookingApi.
 * @export
 * @interface BookingApiBookingControllerGetMyBookingsRequest
 */
export interface BookingApiBookingControllerGetMyBookingsRequest {
    /**
     *
     * @type {number}
     * @memberof BookingApiBookingControllerGetMyBookings
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof BookingApiBookingControllerGetMyBookings
     */
    readonly pageSize?: number;
    /**
     * Filter my bookings
     * @type {string}
     * @memberof BookingApiBookingControllerGetMyBookings
     */
    readonly filters?: string;
}
/**
 * Request parameters for bookingControllerUpdateBookingStatus operation in BookingApi.
 * @export
 * @interface BookingApiBookingControllerUpdateBookingStatusRequest
 */
export interface BookingApiBookingControllerUpdateBookingStatusRequest {
    /**
     *
     * @type {string}
     * @memberof BookingApiBookingControllerUpdateBookingStatus
     */
    readonly bookingId: string;
    /**
     *
     * @type {UpdateBookingStatusDto}
     * @memberof BookingApiBookingControllerUpdateBookingStatus
     */
    readonly updateBookingStatusDto: UpdateBookingStatusDto;
}
/**
 * BookingApi - object-oriented interface
 * @export
 * @class BookingApi
 * @extends {BaseAPI}
 */
export declare class BookingApi extends BaseAPI {
    /**
     *
     * @summary Cancel a booking
     * @param {BookingApiBookingControllerCancelBookingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerCancelBooking(requestParameters: BookingApiBookingControllerCancelBookingRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Booking, any>>;
    /**
     *
     * @summary Create a new booking directly at the hotel
     * @param {BookingApiBookingControllerCreateBookingDirectlyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerCreateBookingDirectly(requestParameters: BookingApiBookingControllerCreateBookingDirectlyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Booking, any>>;
    /**
     *
     * @summary Create a new booking online
     * @param {BookingApiBookingControllerCreateBookingOnlineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerCreateBookingOnline(requestParameters: BookingApiBookingControllerCreateBookingOnlineRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Booking, any>>;
    /**
     *
     * @summary Get booking details
     * @param {BookingApiBookingControllerFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerFindById(requestParameters: BookingApiBookingControllerFindByIdRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Booking, any>>;
    /**
     *
     * @summary Get all bookings with pagination and filters
     * @param {BookingApiBookingControllerGetBookingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerGetBookings(requestParameters?: BookingApiBookingControllerGetBookingsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BookingsPaginationResultDto, any>>;
    /**
     *
     * @summary Get all my bookings with pagination and filters
     * @param {BookingApiBookingControllerGetMyBookingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerGetMyBookings(requestParameters?: BookingApiBookingControllerGetMyBookingsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BookingsPaginationResultDto, any>>;
    /**
     *
     * @summary Handle payment webhook from PayOS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerHandlePaymentWebhook(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update booking status
     * @param {BookingApiBookingControllerUpdateBookingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerUpdateBookingStatus(requestParameters: BookingApiBookingControllerUpdateBookingStatusRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Booking, any>>;
}
