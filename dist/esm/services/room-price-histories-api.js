/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * RoomPriceHistoriesApi - axios parameter creator
 * @export
 */
export const RoomPriceHistoriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new room price history
         * @param {CreateRoomPriceHistoryDto} createRoomPriceHistoryDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerCreate: (createRoomPriceHistoryDto_1, ...args_1) => __awaiter(this, [createRoomPriceHistoryDto_1, ...args_1], void 0, function* (createRoomPriceHistoryDto, options = {}) {
            // verify required parameter 'createRoomPriceHistoryDto' is not null or undefined
            assertParamExists('roomPriceHistoryControllerCreate', 'createRoomPriceHistoryDto', createRoomPriceHistoryDto);
            const localVarPath = `/api/room-price-histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomPriceHistoryDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all price histories for a specific room detail
         * @param {string} roomDetailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerFindManyByRoomDetail: (roomDetailId_1, ...args_1) => __awaiter(this, [roomDetailId_1, ...args_1], void 0, function* (roomDetailId, options = {}) {
            // verify required parameter 'roomDetailId' is not null or undefined
            assertParamExists('roomPriceHistoryControllerFindManyByRoomDetail', 'roomDetailId', roomDetailId);
            const localVarPath = `/api/room-price-histories/room-detail/{roomDetailId}`
                .replace(`{${"roomDetailId"}}`, encodeURIComponent(String(roomDetailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a room price history
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPriceHistoryControllerRemove', 'id', id);
            const localVarPath = `/api/room-price-histories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a room price history
         * @param {string} id
         * @param {UpdateRoomPriceHistoryDto} updateRoomPriceHistoryDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerUpdate: (id_1, updateRoomPriceHistoryDto_1, ...args_1) => __awaiter(this, [id_1, updateRoomPriceHistoryDto_1, ...args_1], void 0, function* (id, updateRoomPriceHistoryDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPriceHistoryControllerUpdate', 'id', id);
            // verify required parameter 'updateRoomPriceHistoryDto' is not null or undefined
            assertParamExists('roomPriceHistoryControllerUpdate', 'updateRoomPriceHistoryDto', updateRoomPriceHistoryDto);
            const localVarPath = `/api/room-price-histories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoomPriceHistoryDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RoomPriceHistoriesApi - functional programming interface
 * @export
 */
export const RoomPriceHistoriesApiFp = function (configuration) {
    const localVarAxiosParamCreator = RoomPriceHistoriesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new room price history
         * @param {CreateRoomPriceHistoryDto} createRoomPriceHistoryDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerCreate(createRoomPriceHistoryDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPriceHistoryControllerCreate(createRoomPriceHistoryDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPriceHistoriesApi.roomPriceHistoryControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all price histories for a specific room detail
         * @param {string} roomDetailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerFindManyByRoomDetail(roomDetailId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPriceHistoryControllerFindManyByRoomDetail(roomDetailId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPriceHistoriesApi.roomPriceHistoryControllerFindManyByRoomDetail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a room price history
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPriceHistoryControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPriceHistoriesApi.roomPriceHistoryControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a room price history
         * @param {string} id
         * @param {UpdateRoomPriceHistoryDto} updateRoomPriceHistoryDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerUpdate(id, updateRoomPriceHistoryDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPriceHistoryControllerUpdate(id, updateRoomPriceHistoryDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPriceHistoriesApi.roomPriceHistoryControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * RoomPriceHistoriesApi - factory interface
 * @export
 */
export const RoomPriceHistoriesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RoomPriceHistoriesApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new room price history
         * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerCreate(requestParameters, options) {
            return localVarFp.roomPriceHistoryControllerCreate(requestParameters.createRoomPriceHistoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all price histories for a specific room detail
         * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerFindManyByRoomDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerFindManyByRoomDetail(requestParameters, options) {
            return localVarFp.roomPriceHistoryControllerFindManyByRoomDetail(requestParameters.roomDetailId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a room price history
         * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerRemove(requestParameters, options) {
            return localVarFp.roomPriceHistoryControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a room price history
         * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPriceHistoryControllerUpdate(requestParameters, options) {
            return localVarFp.roomPriceHistoryControllerUpdate(requestParameters.id, requestParameters.updateRoomPriceHistoryDto, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RoomPriceHistoriesApi - object-oriented interface
 * @export
 * @class RoomPriceHistoriesApi
 * @extends {BaseAPI}
 */
export class RoomPriceHistoriesApi extends BaseAPI {
    /**
     *
     * @summary Create a new room price history
     * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPriceHistoriesApi
     */
    roomPriceHistoryControllerCreate(requestParameters, options) {
        return RoomPriceHistoriesApiFp(this.configuration).roomPriceHistoryControllerCreate(requestParameters.createRoomPriceHistoryDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all price histories for a specific room detail
     * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerFindManyByRoomDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPriceHistoriesApi
     */
    roomPriceHistoryControllerFindManyByRoomDetail(requestParameters, options) {
        return RoomPriceHistoriesApiFp(this.configuration).roomPriceHistoryControllerFindManyByRoomDetail(requestParameters.roomDetailId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a room price history
     * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPriceHistoriesApi
     */
    roomPriceHistoryControllerRemove(requestParameters, options) {
        return RoomPriceHistoriesApiFp(this.configuration).roomPriceHistoryControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a room price history
     * @param {RoomPriceHistoriesApiRoomPriceHistoryControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPriceHistoriesApi
     */
    roomPriceHistoryControllerUpdate(requestParameters, options) {
        return RoomPriceHistoriesApiFp(this.configuration).roomPriceHistoryControllerUpdate(requestParameters.id, requestParameters.updateRoomPriceHistoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}
