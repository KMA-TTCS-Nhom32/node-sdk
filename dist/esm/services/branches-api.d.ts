/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { Branch } from '../models';
import type { BranchDetail } from '../models';
import type { BranchesInfinitePaginationResultDto } from '../models';
import type { BranchesPaginationResultDto } from '../models';
import type { CreateBranchDto } from '../models';
import type { UpdateBranchDto } from '../models';
/**
 * BranchesApi - axios parameter creator
 * @export
 */
export declare const BranchesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new branch
     * @param {CreateBranchDto} createBranchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerCreate: (createBranchDto: CreateBranchDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all soft-deleted branches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindDeleted: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all branches with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterBranchesDto
     * @param {string} [sort] JSON string of SortBranchDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindMany: (page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get branches with infinite scroll for client app
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterBranchesDto
     * @param {string} [sort] JSON string of SortBranchDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindManyInfinite: (page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get branch by ID or slug
     * @param {string} idOrSlug
     * @param {string} [acceptLanguage] Language preference (en, vi)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindOne: (idOrSlug: string, acceptLanguage?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get latest branches
     * @param {number} [limit] Number of branches to get
     * @param {string} [acceptLanguage] Language preference (en, vi)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerGetLatestBranches: (limit?: number, acceptLanguage?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a branch
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Restore a soft-deleted branch
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerRestore: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a branch
     * @param {string} id
     * @param {UpdateBranchDto} updateBranchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerUpdate: (id: string, updateBranchDto: UpdateBranchDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BranchesApi - functional programming interface
 * @export
 */
export declare const BranchesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new branch
     * @param {CreateBranchDto} createBranchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerCreate(createBranchDto: CreateBranchDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>>;
    /**
     *
     * @summary Get all soft-deleted branches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Branch>>>;
    /**
     *
     * @summary Get all branches with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterBranchesDto
     * @param {string} [sort] JSON string of SortBranchDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchesPaginationResultDto>>;
    /**
     *
     * @summary Get branches with infinite scroll for client app
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterBranchesDto
     * @param {string} [sort] JSON string of SortBranchDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindManyInfinite(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchesInfinitePaginationResultDto>>;
    /**
     *
     * @summary Get branch by ID or slug
     * @param {string} idOrSlug
     * @param {string} [acceptLanguage] Language preference (en, vi)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindOne(idOrSlug: string, acceptLanguage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchDetail>>;
    /**
     *
     * @summary Get latest branches
     * @param {number} [limit] Number of branches to get
     * @param {string} [acceptLanguage] Language preference (en, vi)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerGetLatestBranches(limit?: number, acceptLanguage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Branch>>>;
    /**
     *
     * @summary Delete a branch
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Restore a soft-deleted branch
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a branch
     * @param {string} id
     * @param {UpdateBranchDto} updateBranchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerUpdate(id: string, updateBranchDto: UpdateBranchDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>>;
};
/**
 * BranchesApi - factory interface
 * @export
 */
export declare const BranchesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new branch
     * @param {BranchesApiBranchControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerCreate(requestParameters: BranchesApiBranchControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Branch>;
    /**
     *
     * @summary Get all soft-deleted branches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<Branch>>;
    /**
     *
     * @summary Get all branches with pagination and filters
     * @param {BranchesApiBranchControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindMany(requestParameters?: BranchesApiBranchControllerFindManyRequest, options?: RawAxiosRequestConfig): AxiosPromise<BranchesPaginationResultDto>;
    /**
     *
     * @summary Get branches with infinite scroll for client app
     * @param {BranchesApiBranchControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindManyInfinite(requestParameters?: BranchesApiBranchControllerFindManyInfiniteRequest, options?: RawAxiosRequestConfig): AxiosPromise<BranchesInfinitePaginationResultDto>;
    /**
     *
     * @summary Get branch by ID or slug
     * @param {BranchesApiBranchControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerFindOne(requestParameters: BranchesApiBranchControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<BranchDetail>;
    /**
     *
     * @summary Get latest branches
     * @param {BranchesApiBranchControllerGetLatestBranchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerGetLatestBranches(requestParameters?: BranchesApiBranchControllerGetLatestBranchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Branch>>;
    /**
     *
     * @summary Delete a branch
     * @param {BranchesApiBranchControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerRemove(requestParameters: BranchesApiBranchControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Restore a soft-deleted branch
     * @param {BranchesApiBranchControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerRestore(requestParameters: BranchesApiBranchControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update a branch
     * @param {BranchesApiBranchControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    branchControllerUpdate(requestParameters: BranchesApiBranchControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Branch>;
};
/**
 * Request parameters for branchControllerCreate operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerCreateRequest
 */
export interface BranchesApiBranchControllerCreateRequest {
    /**
     *
     * @type {CreateBranchDto}
     * @memberof BranchesApiBranchControllerCreate
     */
    readonly createBranchDto: CreateBranchDto;
}
/**
 * Request parameters for branchControllerFindMany operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerFindManyRequest
 */
export interface BranchesApiBranchControllerFindManyRequest {
    /**
     *
     * @type {number}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterBranchesDto
     * @type {string}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly filters?: string;
    /**
     * JSON string of SortBranchDto[]
     * @type {string}
     * @memberof BranchesApiBranchControllerFindMany
     */
    readonly sort?: string;
}
/**
 * Request parameters for branchControllerFindManyInfinite operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerFindManyInfiniteRequest
 */
export interface BranchesApiBranchControllerFindManyInfiniteRequest {
    /**
     *
     * @type {number}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterBranchesDto
     * @type {string}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly filters?: string;
    /**
     * JSON string of SortBranchDto[]
     * @type {string}
     * @memberof BranchesApiBranchControllerFindManyInfinite
     */
    readonly sort?: string;
}
/**
 * Request parameters for branchControllerFindOne operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerFindOneRequest
 */
export interface BranchesApiBranchControllerFindOneRequest {
    /**
     *
     * @type {string}
     * @memberof BranchesApiBranchControllerFindOne
     */
    readonly idOrSlug: string;
    /**
     * Language preference (en, vi)
     * @type {string}
     * @memberof BranchesApiBranchControllerFindOne
     */
    readonly acceptLanguage?: string;
}
/**
 * Request parameters for branchControllerGetLatestBranches operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerGetLatestBranchesRequest
 */
export interface BranchesApiBranchControllerGetLatestBranchesRequest {
    /**
     * Number of branches to get
     * @type {number}
     * @memberof BranchesApiBranchControllerGetLatestBranches
     */
    readonly limit?: number;
    /**
     * Language preference (en, vi)
     * @type {string}
     * @memberof BranchesApiBranchControllerGetLatestBranches
     */
    readonly acceptLanguage?: string;
}
/**
 * Request parameters for branchControllerRemove operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerRemoveRequest
 */
export interface BranchesApiBranchControllerRemoveRequest {
    /**
     *
     * @type {string}
     * @memberof BranchesApiBranchControllerRemove
     */
    readonly id: string;
}
/**
 * Request parameters for branchControllerRestore operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerRestoreRequest
 */
export interface BranchesApiBranchControllerRestoreRequest {
    /**
     *
     * @type {string}
     * @memberof BranchesApiBranchControllerRestore
     */
    readonly id: string;
}
/**
 * Request parameters for branchControllerUpdate operation in BranchesApi.
 * @export
 * @interface BranchesApiBranchControllerUpdateRequest
 */
export interface BranchesApiBranchControllerUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof BranchesApiBranchControllerUpdate
     */
    readonly id: string;
    /**
     *
     * @type {UpdateBranchDto}
     * @memberof BranchesApiBranchControllerUpdate
     */
    readonly updateBranchDto: UpdateBranchDto;
}
/**
 * BranchesApi - object-oriented interface
 * @export
 * @class BranchesApi
 * @extends {BaseAPI}
 */
export declare class BranchesApi extends BaseAPI {
    /**
     *
     * @summary Create a new branch
     * @param {BranchesApiBranchControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerCreate(requestParameters: BranchesApiBranchControllerCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Branch, any>>;
    /**
     *
     * @summary Get all soft-deleted branches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Branch[], any>>;
    /**
     *
     * @summary Get all branches with pagination and filters
     * @param {BranchesApiBranchControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindMany(requestParameters?: BranchesApiBranchControllerFindManyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BranchesPaginationResultDto, any>>;
    /**
     *
     * @summary Get branches with infinite scroll for client app
     * @param {BranchesApiBranchControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindManyInfinite(requestParameters?: BranchesApiBranchControllerFindManyInfiniteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BranchesInfinitePaginationResultDto, any>>;
    /**
     *
     * @summary Get branch by ID or slug
     * @param {BranchesApiBranchControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindOne(requestParameters: BranchesApiBranchControllerFindOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BranchDetail, any>>;
    /**
     *
     * @summary Get latest branches
     * @param {BranchesApiBranchControllerGetLatestBranchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerGetLatestBranches(requestParameters?: BranchesApiBranchControllerGetLatestBranchesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Branch[], any>>;
    /**
     *
     * @summary Delete a branch
     * @param {BranchesApiBranchControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerRemove(requestParameters: BranchesApiBranchControllerRemoveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Restore a soft-deleted branch
     * @param {BranchesApiBranchControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerRestore(requestParameters: BranchesApiBranchControllerRestoreRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a branch
     * @param {BranchesApiBranchControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerUpdate(requestParameters: BranchesApiBranchControllerUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Branch, any>>;
}
