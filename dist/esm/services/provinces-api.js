/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * ProvincesApi - axios parameter creator
 * @export
 */
export const ProvincesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new province
         * @param {CreateProvinceDto} createProvinceDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerCreate: (createProvinceDto_1, ...args_1) => __awaiter(this, [createProvinceDto_1, ...args_1], void 0, function* (createProvinceDto, options = {}) {
            // verify required parameter 'createProvinceDto' is not null or undefined
            assertParamExists('provincesControllerCreate', 'createProvinceDto', createProvinceDto);
            const localVarPath = `/api/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createProvinceDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all soft-deleted provinces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindDeleted: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/provinces/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all provinces with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterProvincesDto
         * @param {string} [sort] JSON string of SortProvinceDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindMany: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/provinces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get province by ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerFindOne', 'id', id);
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a province
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerRemove', 'id', id);
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Restore a soft-deleted province
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRestore: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerRestore', 'id', id);
            const localVarPath = `/api/provinces/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a province
         * @param {string} id
         * @param {UpdateProvinceDto} updateProvinceDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerUpdate: (id_1, updateProvinceDto_1, ...args_1) => __awaiter(this, [id_1, updateProvinceDto_1, ...args_1], void 0, function* (id, updateProvinceDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('provincesControllerUpdate', 'id', id);
            // verify required parameter 'updateProvinceDto' is not null or undefined
            assertParamExists('provincesControllerUpdate', 'updateProvinceDto', updateProvinceDto);
            const localVarPath = `/api/provinces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateProvinceDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProvincesApi - functional programming interface
 * @export
 */
export const ProvincesApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProvincesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new province
         * @param {CreateProvinceDto} createProvinceDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerCreate(createProvinceDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.provincesControllerCreate(createProvinceDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProvincesApi.provincesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all soft-deleted provinces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindDeleted(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.provincesControllerFindDeleted(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProvincesApi.provincesControllerFindDeleted']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all provinces with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterProvincesDto
         * @param {string} [sort] JSON string of SortProvinceDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindMany(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.provincesControllerFindMany(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProvincesApi.provincesControllerFindMany']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get province by ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.provincesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProvincesApi.provincesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a province
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.provincesControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProvincesApi.provincesControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Restore a soft-deleted province
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRestore(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.provincesControllerRestore(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProvincesApi.provincesControllerRestore']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a province
         * @param {string} id
         * @param {UpdateProvinceDto} updateProvinceDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerUpdate(id, updateProvinceDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.provincesControllerUpdate(id, updateProvinceDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProvincesApi.provincesControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ProvincesApi - factory interface
 * @export
 */
export const ProvincesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProvincesApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new province
         * @param {ProvincesApiProvincesControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerCreate(requestParameters, options) {
            return localVarFp.provincesControllerCreate(requestParameters.createProvinceDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all soft-deleted provinces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindDeleted(options) {
            return localVarFp.provincesControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all provinces with pagination and filters
         * @param {ProvincesApiProvincesControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindMany(requestParameters = {}, options) {
            return localVarFp.provincesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get province by ID
         * @param {ProvincesApiProvincesControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerFindOne(requestParameters, options) {
            return localVarFp.provincesControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a province
         * @param {ProvincesApiProvincesControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRemove(requestParameters, options) {
            return localVarFp.provincesControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Restore a soft-deleted province
         * @param {ProvincesApiProvincesControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerRestore(requestParameters, options) {
            return localVarFp.provincesControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a province
         * @param {ProvincesApiProvincesControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provincesControllerUpdate(requestParameters, options) {
            return localVarFp.provincesControllerUpdate(requestParameters.id, requestParameters.updateProvinceDto, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProvincesApi - object-oriented interface
 * @export
 * @class ProvincesApi
 * @extends {BaseAPI}
 */
export class ProvincesApi extends BaseAPI {
    /**
     *
     * @summary Create a new province
     * @param {ProvincesApiProvincesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerCreate(requestParameters, options) {
        return ProvincesApiFp(this.configuration).provincesControllerCreate(requestParameters.createProvinceDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all soft-deleted provinces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerFindDeleted(options) {
        return ProvincesApiFp(this.configuration).provincesControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all provinces with pagination and filters
     * @param {ProvincesApiProvincesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerFindMany(requestParameters = {}, options) {
        return ProvincesApiFp(this.configuration).provincesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get province by ID
     * @param {ProvincesApiProvincesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerFindOne(requestParameters, options) {
        return ProvincesApiFp(this.configuration).provincesControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a province
     * @param {ProvincesApiProvincesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerRemove(requestParameters, options) {
        return ProvincesApiFp(this.configuration).provincesControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Restore a soft-deleted province
     * @param {ProvincesApiProvincesControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerRestore(requestParameters, options) {
        return ProvincesApiFp(this.configuration).provincesControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a province
     * @param {ProvincesApiProvincesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerUpdate(requestParameters, options) {
        return ProvincesApiFp(this.configuration).provincesControllerUpdate(requestParameters.id, requestParameters.updateProvinceDto, options).then((request) => request(this.axios, this.basePath));
    }
}
