/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * RoomDetailsApi - axios parameter creator
 * @export
 */
export const RoomDetailsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new room detail
         * @param {CreateRoomDetailDto} createRoomDetailDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerCreate: (createRoomDetailDto_1, ...args_1) => __awaiter(this, [createRoomDetailDto_1, ...args_1], void 0, function* (createRoomDetailDto, options = {}) {
            // verify required parameter 'createRoomDetailDto' is not null or undefined
            assertParamExists('roomDetailControllerCreate', 'createRoomDetailDto', createRoomDetailDto);
            const localVarPath = `/api/room-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomDetailDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all soft-deleted room details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindDeleted: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/room-details/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all room details with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindMany: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/room-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all room details with infinite pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindManyInfinite: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/room-details/infinite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a room detail by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerFindOne', 'id', id);
            const localVarPath = `/api/room-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Soft delete a room detail
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerRemove', 'id', id);
            const localVarPath = `/api/room-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Restore a soft-deleted room detail
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRestore: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerRestore', 'id', id);
            const localVarPath = `/api/room-details/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a room detail
         * @param {string} id
         * @param {UpdateRoomDetailDto} updateRoomDetailDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerUpdate: (id_1, updateRoomDetailDto_1, ...args_1) => __awaiter(this, [id_1, updateRoomDetailDto_1, ...args_1], void 0, function* (id, updateRoomDetailDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomDetailControllerUpdate', 'id', id);
            // verify required parameter 'updateRoomDetailDto' is not null or undefined
            assertParamExists('roomDetailControllerUpdate', 'updateRoomDetailDto', updateRoomDetailDto);
            const localVarPath = `/api/room-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoomDetailDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RoomDetailsApi - functional programming interface
 * @export
 */
export const RoomDetailsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RoomDetailsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new room detail
         * @param {CreateRoomDetailDto} createRoomDetailDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerCreate(createRoomDetailDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerCreate(createRoomDetailDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all soft-deleted room details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindDeleted(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerFindDeleted(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerFindDeleted']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all room details with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindMany(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerFindMany(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerFindMany']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all room details with infinite pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterRoomDetailDto
         * @param {Array<string>} [sort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindManyInfinite(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerFindManyInfinite(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerFindManyInfinite']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get a room detail by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Soft delete a room detail
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Restore a soft-deleted room detail
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRestore(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerRestore(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerRestore']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a room detail
         * @param {string} id
         * @param {UpdateRoomDetailDto} updateRoomDetailDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerUpdate(id, updateRoomDetailDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomDetailControllerUpdate(id, updateRoomDetailDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomDetailsApi.roomDetailControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * RoomDetailsApi - factory interface
 * @export
 */
export const RoomDetailsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RoomDetailsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new room detail
         * @param {RoomDetailsApiRoomDetailControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerCreate(requestParameters, options) {
            return localVarFp.roomDetailControllerCreate(requestParameters.createRoomDetailDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all soft-deleted room details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindDeleted(options) {
            return localVarFp.roomDetailControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all room details with pagination and filters
         * @param {RoomDetailsApiRoomDetailControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindMany(requestParameters = {}, options) {
            return localVarFp.roomDetailControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all room details with infinite pagination and filters
         * @param {RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindManyInfinite(requestParameters = {}, options) {
            return localVarFp.roomDetailControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a room detail by id
         * @param {RoomDetailsApiRoomDetailControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerFindOne(requestParameters, options) {
            return localVarFp.roomDetailControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Soft delete a room detail
         * @param {RoomDetailsApiRoomDetailControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRemove(requestParameters, options) {
            return localVarFp.roomDetailControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Restore a soft-deleted room detail
         * @param {RoomDetailsApiRoomDetailControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerRestore(requestParameters, options) {
            return localVarFp.roomDetailControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a room detail
         * @param {RoomDetailsApiRoomDetailControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomDetailControllerUpdate(requestParameters, options) {
            return localVarFp.roomDetailControllerUpdate(requestParameters.id, requestParameters.updateRoomDetailDto, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RoomDetailsApi - object-oriented interface
 * @export
 * @class RoomDetailsApi
 * @extends {BaseAPI}
 */
export class RoomDetailsApi extends BaseAPI {
    /**
     *
     * @summary Create a new room detail
     * @param {RoomDetailsApiRoomDetailControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerCreate(requestParameters, options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerCreate(requestParameters.createRoomDetailDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all soft-deleted room details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindDeleted(options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all room details with pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindMany(requestParameters = {}, options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all room details with infinite pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindManyInfinite(requestParameters = {}, options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a room detail by id
     * @param {RoomDetailsApiRoomDetailControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindOne(requestParameters, options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Soft delete a room detail
     * @param {RoomDetailsApiRoomDetailControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerRemove(requestParameters, options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Restore a soft-deleted room detail
     * @param {RoomDetailsApiRoomDetailControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerRestore(requestParameters, options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a room detail
     * @param {RoomDetailsApiRoomDetailControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerUpdate(requestParameters, options) {
        return RoomDetailsApiFp(this.configuration).roomDetailControllerUpdate(requestParameters.id, requestParameters.updateRoomDetailDto, options).then((request) => request(this.axios, this.basePath));
    }
}
