/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AdminUpdateUserDto } from '../models';
import type { BlockOrUnblockUserDto } from '../models';
import type { DeleteUserDto } from '../models';
import type { User } from '../models';
import type { UserDetail } from '../models';
import type { UsersPaginationResultDto } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get detailed user information (Admin only)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerAdminGetUserDetail: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update user information (Admin only)
     * @param {string} id
     * @param {AdminUpdateUserDto} adminUpdateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerAdminUpdateUser: (id: string, adminUpdateUserDto: AdminUpdateUserDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Block or unblock a user
     * @param {string} id
     * @param {BlockOrUnblockUserDto} blockOrUnblockUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerBlockUser: (id: string, blockOrUnblockUserDto: BlockOrUnblockUserDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Soft delete a user (Admin only)
     * @param {string} id
     * @param {DeleteUserDto} deleteUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerDeleteUser: (id: string, deleteUserDto: DeleteUserDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterUserDto
     * @param {string} [sort] JSON string of SortUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUsers: (page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Restore a deleted user (Admin only)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRestoreUser: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get detailed user information (Admin only)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerAdminGetUserDetail(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>>;
    /**
     *
     * @summary Update user information (Admin only)
     * @param {string} id
     * @param {AdminUpdateUserDto} adminUpdateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerAdminUpdateUser(id: string, adminUpdateUserDto: AdminUpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>>;
    /**
     *
     * @summary Block or unblock a user
     * @param {string} id
     * @param {BlockOrUnblockUserDto} blockOrUnblockUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerBlockUser(id: string, blockOrUnblockUserDto: BlockOrUnblockUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Soft delete a user (Admin only)
     * @param {string} id
     * @param {DeleteUserDto} deleteUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerDeleteUser(id: string, deleteUserDto: DeleteUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterUserDto
     * @param {string} [sort] JSON string of SortUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUsers(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPaginationResultDto>>;
    /**
     *
     * @summary Restore a deleted user (Admin only)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRestoreUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get detailed user information (Admin only)
     * @param {UsersApiUsersControllerAdminGetUserDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerAdminGetUserDetail(requestParameters: UsersApiUsersControllerAdminGetUserDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail>;
    /**
     *
     * @summary Update user information (Admin only)
     * @param {UsersApiUsersControllerAdminUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerAdminUpdateUser(requestParameters: UsersApiUsersControllerAdminUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail>;
    /**
     *
     * @summary Block or unblock a user
     * @param {UsersApiUsersControllerBlockUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerBlockUser(requestParameters: UsersApiUsersControllerBlockUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Soft delete a user (Admin only)
     * @param {UsersApiUsersControllerDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerDeleteUser(requestParameters: UsersApiUsersControllerDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @param {UsersApiUsersControllerGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUsers(requestParameters?: UsersApiUsersControllerGetUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPaginationResultDto>;
    /**
     *
     * @summary Restore a deleted user (Admin only)
     * @param {UsersApiUsersControllerRestoreUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRestoreUser(requestParameters: UsersApiUsersControllerRestoreUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;
};
/**
 * Request parameters for usersControllerAdminGetUserDetail operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerAdminGetUserDetailRequest
 */
export interface UsersApiUsersControllerAdminGetUserDetailRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUsersControllerAdminGetUserDetail
     */
    readonly id: string;
}
/**
 * Request parameters for usersControllerAdminUpdateUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerAdminUpdateUserRequest
 */
export interface UsersApiUsersControllerAdminUpdateUserRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUsersControllerAdminUpdateUser
     */
    readonly id: string;
    /**
     *
     * @type {AdminUpdateUserDto}
     * @memberof UsersApiUsersControllerAdminUpdateUser
     */
    readonly adminUpdateUserDto: AdminUpdateUserDto;
}
/**
 * Request parameters for usersControllerBlockUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerBlockUserRequest
 */
export interface UsersApiUsersControllerBlockUserRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUsersControllerBlockUser
     */
    readonly id: string;
    /**
     *
     * @type {BlockOrUnblockUserDto}
     * @memberof UsersApiUsersControllerBlockUser
     */
    readonly blockOrUnblockUserDto: BlockOrUnblockUserDto;
}
/**
 * Request parameters for usersControllerDeleteUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerDeleteUserRequest
 */
export interface UsersApiUsersControllerDeleteUserRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUsersControllerDeleteUser
     */
    readonly id: string;
    /**
     *
     * @type {DeleteUserDto}
     * @memberof UsersApiUsersControllerDeleteUser
     */
    readonly deleteUserDto: DeleteUserDto;
}
/**
 * Request parameters for usersControllerGetUsers operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerGetUsersRequest
 */
export interface UsersApiUsersControllerGetUsersRequest {
    /**
     *
     * @type {number}
     * @memberof UsersApiUsersControllerGetUsers
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof UsersApiUsersControllerGetUsers
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterUserDto
     * @type {string}
     * @memberof UsersApiUsersControllerGetUsers
     */
    readonly filters?: string;
    /**
     * JSON string of SortUserDto
     * @type {string}
     * @memberof UsersApiUsersControllerGetUsers
     */
    readonly sort?: string;
}
/**
 * Request parameters for usersControllerRestoreUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerRestoreUserRequest
 */
export interface UsersApiUsersControllerRestoreUserRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUsersControllerRestoreUser
     */
    readonly id: string;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Get detailed user information (Admin only)
     * @param {UsersApiUsersControllerAdminGetUserDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerAdminGetUserDetail(requestParameters: UsersApiUsersControllerAdminGetUserDetailRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserDetail, any>>;
    /**
     *
     * @summary Update user information (Admin only)
     * @param {UsersApiUsersControllerAdminUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerAdminUpdateUser(requestParameters: UsersApiUsersControllerAdminUpdateUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserDetail, any>>;
    /**
     *
     * @summary Block or unblock a user
     * @param {UsersApiUsersControllerBlockUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerBlockUser(requestParameters: UsersApiUsersControllerBlockUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Soft delete a user (Admin only)
     * @param {UsersApiUsersControllerDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerDeleteUser(requestParameters: UsersApiUsersControllerDeleteUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @param {UsersApiUsersControllerGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerGetUsers(requestParameters?: UsersApiUsersControllerGetUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersPaginationResultDto, any>>;
    /**
     *
     * @summary Restore a deleted user (Admin only)
     * @param {UsersApiUsersControllerRestoreUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerRestoreUser(requestParameters: UsersApiUsersControllerRestoreUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
}
