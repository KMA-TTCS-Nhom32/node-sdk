/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * RoomPromotionsApi - axios parameter creator
 * @export
 */
export const RoomPromotionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new room promotion
         * @param {CreateRoomPromotionDto} createRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerCreate: (createRoomPromotionDto_1, ...args_1) => __awaiter(this, [createRoomPromotionDto_1, ...args_1], void 0, function* (createRoomPromotionDto, options = {}) {
            // verify required parameter 'createRoomPromotionDto' is not null or undefined
            assertParamExists('roomPromotionControllerCreate', 'createRoomPromotionDto', createRoomPromotionDto);
            const localVarPath = `/api/room-promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomPromotionDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all soft-deleted room promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindDeleted: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/room-promotions/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all room promotions with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterRoomPromotionDto
         * @param {string} [sort] JSON string of SortRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindMany: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/room-promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get room promotion by ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerFindOne', 'id', id);
            const localVarPath = `/api/room-promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a room promotion
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerRemove', 'id', id);
            const localVarPath = `/api/room-promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Restore a soft-deleted room promotion
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRestore: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerRestore', 'id', id);
            const localVarPath = `/api/room-promotions/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a room promotion
         * @param {string} id
         * @param {UpdateRoomPromotionDto} updateRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerUpdate: (id_1, updateRoomPromotionDto_1, ...args_1) => __awaiter(this, [id_1, updateRoomPromotionDto_1, ...args_1], void 0, function* (id, updateRoomPromotionDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('roomPromotionControllerUpdate', 'id', id);
            // verify required parameter 'updateRoomPromotionDto' is not null or undefined
            assertParamExists('roomPromotionControllerUpdate', 'updateRoomPromotionDto', updateRoomPromotionDto);
            const localVarPath = `/api/room-promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoomPromotionDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Validate a promotion code for a specific room
         * @param {string} code
         * @param {string} roomDetailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerValidatePromotionCode: (code_1, roomDetailId_1, ...args_1) => __awaiter(this, [code_1, roomDetailId_1, ...args_1], void 0, function* (code, roomDetailId, options = {}) {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('roomPromotionControllerValidatePromotionCode', 'code', code);
            // verify required parameter 'roomDetailId' is not null or undefined
            assertParamExists('roomPromotionControllerValidatePromotionCode', 'roomDetailId', roomDetailId);
            const localVarPath = `/api/room-promotions/validate/{code}/room/{roomDetailId}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)))
                .replace(`{${"roomDetailId"}}`, encodeURIComponent(String(roomDetailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RoomPromotionsApi - functional programming interface
 * @export
 */
export const RoomPromotionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RoomPromotionsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create a new room promotion
         * @param {CreateRoomPromotionDto} createRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerCreate(createRoomPromotionDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerCreate(createRoomPromotionDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all soft-deleted room promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindDeleted(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerFindDeleted(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerFindDeleted']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all room promotions with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterRoomPromotionDto
         * @param {string} [sort] JSON string of SortRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindMany(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerFindMany(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerFindMany']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get room promotion by ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a room promotion
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Restore a soft-deleted room promotion
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRestore(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerRestore(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerRestore']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a room promotion
         * @param {string} id
         * @param {UpdateRoomPromotionDto} updateRoomPromotionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerUpdate(id, updateRoomPromotionDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerUpdate(id, updateRoomPromotionDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Validate a promotion code for a specific room
         * @param {string} code
         * @param {string} roomDetailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerValidatePromotionCode(code, roomDetailId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.roomPromotionControllerValidatePromotionCode(code, roomDetailId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RoomPromotionsApi.roomPromotionControllerValidatePromotionCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * RoomPromotionsApi - factory interface
 * @export
 */
export const RoomPromotionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RoomPromotionsApiFp(configuration);
    return {
        /**
         *
         * @summary Create a new room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerCreate(requestParameters, options) {
            return localVarFp.roomPromotionControllerCreate(requestParameters.createRoomPromotionDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all soft-deleted room promotions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindDeleted(options) {
            return localVarFp.roomPromotionControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all room promotions with pagination and filters
         * @param {RoomPromotionsApiRoomPromotionControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindMany(requestParameters = {}, options) {
            return localVarFp.roomPromotionControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get room promotion by ID
         * @param {RoomPromotionsApiRoomPromotionControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerFindOne(requestParameters, options) {
            return localVarFp.roomPromotionControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRemove(requestParameters, options) {
            return localVarFp.roomPromotionControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Restore a soft-deleted room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerRestore(requestParameters, options) {
            return localVarFp.roomPromotionControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a room promotion
         * @param {RoomPromotionsApiRoomPromotionControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerUpdate(requestParameters, options) {
            return localVarFp.roomPromotionControllerUpdate(requestParameters.id, requestParameters.updateRoomPromotionDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Validate a promotion code for a specific room
         * @param {RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomPromotionControllerValidatePromotionCode(requestParameters, options) {
            return localVarFp.roomPromotionControllerValidatePromotionCode(requestParameters.code, requestParameters.roomDetailId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RoomPromotionsApi - object-oriented interface
 * @export
 * @class RoomPromotionsApi
 * @extends {BaseAPI}
 */
export class RoomPromotionsApi extends BaseAPI {
    /**
     *
     * @summary Create a new room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerCreate(requestParameters, options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerCreate(requestParameters.createRoomPromotionDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all soft-deleted room promotions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerFindDeleted(options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all room promotions with pagination and filters
     * @param {RoomPromotionsApiRoomPromotionControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerFindMany(requestParameters = {}, options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get room promotion by ID
     * @param {RoomPromotionsApiRoomPromotionControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerFindOne(requestParameters, options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerRemove(requestParameters, options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Restore a soft-deleted room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerRestore(requestParameters, options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a room promotion
     * @param {RoomPromotionsApiRoomPromotionControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerUpdate(requestParameters, options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerUpdate(requestParameters.id, requestParameters.updateRoomPromotionDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Validate a promotion code for a specific room
     * @param {RoomPromotionsApiRoomPromotionControllerValidatePromotionCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPromotionsApi
     */
    roomPromotionControllerValidatePromotionCode(requestParameters, options) {
        return RoomPromotionsApiFp(this.configuration).roomPromotionControllerValidatePromotionCode(requestParameters.code, requestParameters.roomDetailId, options).then((request) => request(this.axios, this.basePath));
    }
}
