/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * BookingApi - axios parameter creator
 * @export
 */
export const BookingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Cancel a booking
         * @param {string} bookingId
         * @param {CancelBookingDto} cancelBookingDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCancelBooking: (bookingId_1, cancelBookingDto_1, ...args_1) => __awaiter(this, [bookingId_1, cancelBookingDto_1, ...args_1], void 0, function* (bookingId, cancelBookingDto, options = {}) {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('bookingControllerCancelBooking', 'bookingId', bookingId);
            // verify required parameter 'cancelBookingDto' is not null or undefined
            assertParamExists('bookingControllerCancelBooking', 'cancelBookingDto', cancelBookingDto);
            const localVarPath = `/api/booking/cancel/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(cancelBookingDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a new booking directly at the hotel
         * @param {CreateBookingAtHotelDto} createBookingAtHotelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateBookingDirectly: (createBookingAtHotelDto_1, ...args_1) => __awaiter(this, [createBookingAtHotelDto_1, ...args_1], void 0, function* (createBookingAtHotelDto, options = {}) {
            // verify required parameter 'createBookingAtHotelDto' is not null or undefined
            assertParamExists('bookingControllerCreateBookingDirectly', 'createBookingAtHotelDto', createBookingAtHotelDto);
            const localVarPath = `/api/booking/directly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createBookingAtHotelDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create a new booking online
         * @param {CreateBookingOnlineDto} createBookingOnlineDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateBookingOnline: (createBookingOnlineDto_1, ...args_1) => __awaiter(this, [createBookingOnlineDto_1, ...args_1], void 0, function* (createBookingOnlineDto, options = {}) {
            // verify required parameter 'createBookingOnlineDto' is not null or undefined
            assertParamExists('bookingControllerCreateBookingOnline', 'createBookingOnlineDto', createBookingOnlineDto);
            const localVarPath = `/api/booking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(createBookingOnlineDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get booking details
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerFindById: (bookingId_1, ...args_1) => __awaiter(this, [bookingId_1, ...args_1], void 0, function* (bookingId, options = {}) {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('bookingControllerFindById', 'bookingId', bookingId);
            const localVarPath = `/api/booking/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all bookings with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterBookingsDto
         * @param {string} [sort] JSON string of SortBookingsDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetBookings: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/booking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all my bookings with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] Filter my bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetMyBookings: (page_1, pageSize_1, filters_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, ...args_1], void 0, function* (page, pageSize, filters, options = {}) {
            const localVarPath = `/api/booking/my-bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Handle payment webhook from PayOS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerHandlePaymentWebhook: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/booking/webhook/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update booking status
         * @param {string} bookingId
         * @param {UpdateBookingStatusDto} updateBookingStatusDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerUpdateBookingStatus: (bookingId_1, updateBookingStatusDto_1, ...args_1) => __awaiter(this, [bookingId_1, updateBookingStatusDto_1, ...args_1], void 0, function* (bookingId, updateBookingStatusDto, options = {}) {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('bookingControllerUpdateBookingStatus', 'bookingId', bookingId);
            // verify required parameter 'updateBookingStatusDto' is not null or undefined
            assertParamExists('bookingControllerUpdateBookingStatus', 'updateBookingStatusDto', updateBookingStatusDto);
            const localVarPath = `/api/booking/update-status/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(updateBookingStatusDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BookingApi - functional programming interface
 * @export
 */
export const BookingApiFp = function (configuration) {
    const localVarAxiosParamCreator = BookingApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Cancel a booking
         * @param {string} bookingId
         * @param {CancelBookingDto} cancelBookingDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCancelBooking(bookingId, cancelBookingDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerCancelBooking(bookingId, cancelBookingDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerCancelBooking']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Create a new booking directly at the hotel
         * @param {CreateBookingAtHotelDto} createBookingAtHotelDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateBookingDirectly(createBookingAtHotelDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerCreateBookingDirectly(createBookingAtHotelDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerCreateBookingDirectly']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Create a new booking online
         * @param {CreateBookingOnlineDto} createBookingOnlineDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateBookingOnline(createBookingOnlineDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerCreateBookingOnline(createBookingOnlineDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerCreateBookingOnline']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get booking details
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerFindById(bookingId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerFindById(bookingId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerFindById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all bookings with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterBookingsDto
         * @param {string} [sort] JSON string of SortBookingsDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetBookings(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerGetBookings(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerGetBookings']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all my bookings with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] Filter my bookings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetMyBookings(page, pageSize, filters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerGetMyBookings(page, pageSize, filters, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerGetMyBookings']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Handle payment webhook from PayOS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerHandlePaymentWebhook(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerHandlePaymentWebhook(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerHandlePaymentWebhook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update booking status
         * @param {string} bookingId
         * @param {UpdateBookingStatusDto} updateBookingStatusDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerUpdateBookingStatus(bookingId, updateBookingStatusDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bookingControllerUpdateBookingStatus(bookingId, updateBookingStatusDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BookingApi.bookingControllerUpdateBookingStatus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * BookingApi - factory interface
 * @export
 */
export const BookingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = BookingApiFp(configuration);
    return {
        /**
         *
         * @summary Cancel a booking
         * @param {BookingApiBookingControllerCancelBookingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCancelBooking(requestParameters, options) {
            return localVarFp.bookingControllerCancelBooking(requestParameters.bookingId, requestParameters.cancelBookingDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new booking directly at the hotel
         * @param {BookingApiBookingControllerCreateBookingDirectlyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateBookingDirectly(requestParameters, options) {
            return localVarFp.bookingControllerCreateBookingDirectly(requestParameters.createBookingAtHotelDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new booking online
         * @param {BookingApiBookingControllerCreateBookingOnlineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerCreateBookingOnline(requestParameters, options) {
            return localVarFp.bookingControllerCreateBookingOnline(requestParameters.createBookingOnlineDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get booking details
         * @param {BookingApiBookingControllerFindByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerFindById(requestParameters, options) {
            return localVarFp.bookingControllerFindById(requestParameters.bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all bookings with pagination and filters
         * @param {BookingApiBookingControllerGetBookingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetBookings(requestParameters = {}, options) {
            return localVarFp.bookingControllerGetBookings(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all my bookings with pagination and filters
         * @param {BookingApiBookingControllerGetMyBookingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerGetMyBookings(requestParameters = {}, options) {
            return localVarFp.bookingControllerGetMyBookings(requestParameters.page, requestParameters.pageSize, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Handle payment webhook from PayOS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerHandlePaymentWebhook(options) {
            return localVarFp.bookingControllerHandlePaymentWebhook(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update booking status
         * @param {BookingApiBookingControllerUpdateBookingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingControllerUpdateBookingStatus(requestParameters, options) {
            return localVarFp.bookingControllerUpdateBookingStatus(requestParameters.bookingId, requestParameters.updateBookingStatusDto, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BookingApi - object-oriented interface
 * @export
 * @class BookingApi
 * @extends {BaseAPI}
 */
export class BookingApi extends BaseAPI {
    /**
     *
     * @summary Cancel a booking
     * @param {BookingApiBookingControllerCancelBookingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerCancelBooking(requestParameters, options) {
        return BookingApiFp(this.configuration).bookingControllerCancelBooking(requestParameters.bookingId, requestParameters.cancelBookingDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new booking directly at the hotel
     * @param {BookingApiBookingControllerCreateBookingDirectlyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerCreateBookingDirectly(requestParameters, options) {
        return BookingApiFp(this.configuration).bookingControllerCreateBookingDirectly(requestParameters.createBookingAtHotelDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new booking online
     * @param {BookingApiBookingControllerCreateBookingOnlineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerCreateBookingOnline(requestParameters, options) {
        return BookingApiFp(this.configuration).bookingControllerCreateBookingOnline(requestParameters.createBookingOnlineDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get booking details
     * @param {BookingApiBookingControllerFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerFindById(requestParameters, options) {
        return BookingApiFp(this.configuration).bookingControllerFindById(requestParameters.bookingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all bookings with pagination and filters
     * @param {BookingApiBookingControllerGetBookingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerGetBookings(requestParameters = {}, options) {
        return BookingApiFp(this.configuration).bookingControllerGetBookings(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all my bookings with pagination and filters
     * @param {BookingApiBookingControllerGetMyBookingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerGetMyBookings(requestParameters = {}, options) {
        return BookingApiFp(this.configuration).bookingControllerGetMyBookings(requestParameters.page, requestParameters.pageSize, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Handle payment webhook from PayOS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerHandlePaymentWebhook(options) {
        return BookingApiFp(this.configuration).bookingControllerHandlePaymentWebhook(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update booking status
     * @param {BookingApiBookingControllerUpdateBookingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    bookingControllerUpdateBookingStatus(requestParameters, options) {
        return BookingApiFp(this.configuration).bookingControllerUpdateBookingStatus(requestParameters.bookingId, requestParameters.updateBookingStatusDto, options).then((request) => request(this.axios, this.basePath));
    }
}
