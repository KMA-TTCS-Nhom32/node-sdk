/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get detailed user information (Admin only)
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAdminGetUserDetail: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerAdminGetUserDetail', 'id', id);
            const localVarPath = `/api/users/admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update user information (Admin only)
         * @param {string} id
         * @param {AdminUpdateUserDto} adminUpdateUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAdminUpdateUser: (id_1, adminUpdateUserDto_1, ...args_1) => __awaiter(this, [id_1, adminUpdateUserDto_1, ...args_1], void 0, function* (id, adminUpdateUserDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerAdminUpdateUser', 'id', id);
            // verify required parameter 'adminUpdateUserDto' is not null or undefined
            assertParamExists('usersControllerAdminUpdateUser', 'adminUpdateUserDto', adminUpdateUserDto);
            const localVarPath = `/api/users/admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateUserDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Block or unblock a user
         * @param {string} id
         * @param {BlockOrUnblockUserDto} blockOrUnblockUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerBlockUser: (id_1, blockOrUnblockUserDto_1, ...args_1) => __awaiter(this, [id_1, blockOrUnblockUserDto_1, ...args_1], void 0, function* (id, blockOrUnblockUserDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerBlockUser', 'id', id);
            // verify required parameter 'blockOrUnblockUserDto' is not null or undefined
            assertParamExists('usersControllerBlockUser', 'blockOrUnblockUserDto', blockOrUnblockUserDto);
            const localVarPath = `/api/users/block-action/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(blockOrUnblockUserDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Soft delete a user (Admin only)
         * @param {string} id
         * @param {DeleteUserDto} deleteUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser: (id_1, deleteUserDto_1, ...args_1) => __awaiter(this, [id_1, deleteUserDto_1, ...args_1], void 0, function* (id, deleteUserDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerDeleteUser', 'id', id);
            // verify required parameter 'deleteUserDto' is not null or undefined
            assertParamExists('usersControllerDeleteUser', 'deleteUserDto', deleteUserDto);
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserDto, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterUserDto
         * @param {string} [sort] JSON string of SortUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUsers: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Restore a deleted user (Admin only)
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRestoreUser: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRestoreUser', 'id', id);
            const localVarPath = `/api/users/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get detailed user information (Admin only)
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAdminGetUserDetail(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerAdminGetUserDetail(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersControllerAdminGetUserDetail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update user information (Admin only)
         * @param {string} id
         * @param {AdminUpdateUserDto} adminUpdateUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAdminUpdateUser(id, adminUpdateUserDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerAdminUpdateUser(id, adminUpdateUserDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersControllerAdminUpdateUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Block or unblock a user
         * @param {string} id
         * @param {BlockOrUnblockUserDto} blockOrUnblockUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerBlockUser(id, blockOrUnblockUserDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerBlockUser(id, blockOrUnblockUserDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersControllerBlockUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Soft delete a user (Admin only)
         * @param {string} id
         * @param {DeleteUserDto} deleteUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser(id, deleteUserDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerDeleteUser(id, deleteUserDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersControllerDeleteUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterUserDto
         * @param {string} [sort] JSON string of SortUserDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUsers(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerGetUsers(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersControllerGetUsers']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Restore a deleted user (Admin only)
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRestoreUser(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersControllerRestoreUser(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersControllerRestoreUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         *
         * @summary Get detailed user information (Admin only)
         * @param {UsersApiUsersControllerAdminGetUserDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAdminGetUserDetail(requestParameters, options) {
            return localVarFp.usersControllerAdminGetUserDetail(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update user information (Admin only)
         * @param {UsersApiUsersControllerAdminUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerAdminUpdateUser(requestParameters, options) {
            return localVarFp.usersControllerAdminUpdateUser(requestParameters.id, requestParameters.adminUpdateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Block or unblock a user
         * @param {UsersApiUsersControllerBlockUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerBlockUser(requestParameters, options) {
            return localVarFp.usersControllerBlockUser(requestParameters.id, requestParameters.blockOrUnblockUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Soft delete a user (Admin only)
         * @param {UsersApiUsersControllerDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser(requestParameters, options) {
            return localVarFp.usersControllerDeleteUser(requestParameters.id, requestParameters.deleteUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UsersApiUsersControllerGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUsers(requestParameters = {}, options) {
            return localVarFp.usersControllerGetUsers(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Restore a deleted user (Admin only)
         * @param {UsersApiUsersControllerRestoreUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRestoreUser(requestParameters, options) {
            return localVarFp.usersControllerRestoreUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *
     * @summary Get detailed user information (Admin only)
     * @param {UsersApiUsersControllerAdminGetUserDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerAdminGetUserDetail(requestParameters, options) {
        return UsersApiFp(this.configuration).usersControllerAdminGetUserDetail(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update user information (Admin only)
     * @param {UsersApiUsersControllerAdminUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerAdminUpdateUser(requestParameters, options) {
        return UsersApiFp(this.configuration).usersControllerAdminUpdateUser(requestParameters.id, requestParameters.adminUpdateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Block or unblock a user
     * @param {UsersApiUsersControllerBlockUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerBlockUser(requestParameters, options) {
        return UsersApiFp(this.configuration).usersControllerBlockUser(requestParameters.id, requestParameters.blockOrUnblockUserDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Soft delete a user (Admin only)
     * @param {UsersApiUsersControllerDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerDeleteUser(requestParameters, options) {
        return UsersApiFp(this.configuration).usersControllerDeleteUser(requestParameters.id, requestParameters.deleteUserDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UsersApiUsersControllerGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerGetUsers(requestParameters = {}, options) {
        return UsersApiFp(this.configuration).usersControllerGetUsers(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Restore a deleted user (Admin only)
     * @param {UsersApiUsersControllerRestoreUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerRestoreUser(requestParameters, options) {
        return UsersApiFp(this.configuration).usersControllerRestoreUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
