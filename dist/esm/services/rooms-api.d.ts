/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateHotelRoomDto } from '../models';
import type { HotelRoom } from '../models';
import type { HotelRoomPaginationResultDto } from '../models';
import type { ImmediateDeleteRoomsDto } from '../models';
import type { ResponseWithMessage } from '../models';
import type { UpdateHotelRoomDto } from '../models';
/**
 * RoomsApi - axios parameter creator
 * @export
 */
export declare const RoomsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new room
     * @param {CreateHotelRoomDto} createHotelRoomDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerCreate: (createHotelRoomDto: CreateHotelRoomDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all soft-deleted rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindDeleted: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all rooms with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterHotelRoomDto
     * @param {string} [sort] JSON string of SortHotelRoomDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindMany: (page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary ADMIN - STAFF Get all rooms by branch ID
     * @param {string} branchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindManyByBranchId: (branchId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a room by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary ADMIN - Delete rooms permanently
     * @param {ImmediateDeleteRoomsDto} immediateDeleteRoomsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerPermanentDelete: (immediateDeleteRoomsDto: ImmediateDeleteRoomsDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Soft delete a room
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Restore a soft-deleted room
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerRestore: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a room
     * @param {string} id
     * @param {UpdateHotelRoomDto} updateHotelRoomDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerUpdate: (id: string, updateHotelRoomDto: UpdateHotelRoomDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoomsApi - functional programming interface
 * @export
 */
export declare const RoomsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new room
     * @param {CreateHotelRoomDto} createHotelRoomDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerCreate(createHotelRoomDto: CreateHotelRoomDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoom>>;
    /**
     *
     * @summary Get all soft-deleted rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HotelRoom>>>;
    /**
     *
     * @summary Get all rooms with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterHotelRoomDto
     * @param {string} [sort] JSON string of SortHotelRoomDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoomPaginationResultDto>>;
    /**
     *
     * @summary ADMIN - STAFF Get all rooms by branch ID
     * @param {string} branchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindManyByBranchId(branchId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HotelRoom>>>;
    /**
     *
     * @summary Get a room by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoom>>;
    /**
     *
     * @summary ADMIN - Delete rooms permanently
     * @param {ImmediateDeleteRoomsDto} immediateDeleteRoomsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerPermanentDelete(immediateDeleteRoomsDto: ImmediateDeleteRoomsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Soft delete a room
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Restore a soft-deleted room
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWithMessage>>;
    /**
     *
     * @summary Update a room
     * @param {string} id
     * @param {UpdateHotelRoomDto} updateHotelRoomDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerUpdate(id: string, updateHotelRoomDto: UpdateHotelRoomDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelRoom>>;
};
/**
 * RoomsApi - factory interface
 * @export
 */
export declare const RoomsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new room
     * @param {RoomsApiRoomControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerCreate(requestParameters: RoomsApiRoomControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoom>;
    /**
     *
     * @summary Get all soft-deleted rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<HotelRoom>>;
    /**
     *
     * @summary Get all rooms with pagination and filters
     * @param {RoomsApiRoomControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindMany(requestParameters?: RoomsApiRoomControllerFindManyRequest, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoomPaginationResultDto>;
    /**
     *
     * @summary ADMIN - STAFF Get all rooms by branch ID
     * @param {RoomsApiRoomControllerFindManyByBranchIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindManyByBranchId(requestParameters: RoomsApiRoomControllerFindManyByBranchIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<HotelRoom>>;
    /**
     *
     * @summary Get a room by id
     * @param {RoomsApiRoomControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerFindOne(requestParameters: RoomsApiRoomControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoom>;
    /**
     *
     * @summary ADMIN - Delete rooms permanently
     * @param {RoomsApiRoomControllerPermanentDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerPermanentDelete(requestParameters: RoomsApiRoomControllerPermanentDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Soft delete a room
     * @param {RoomsApiRoomControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerRemove(requestParameters: RoomsApiRoomControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Restore a soft-deleted room
     * @param {RoomsApiRoomControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerRestore(requestParameters: RoomsApiRoomControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseWithMessage>;
    /**
     *
     * @summary Update a room
     * @param {RoomsApiRoomControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomControllerUpdate(requestParameters: RoomsApiRoomControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<HotelRoom>;
};
/**
 * Request parameters for roomControllerCreate operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerCreateRequest
 */
export interface RoomsApiRoomControllerCreateRequest {
    /**
     *
     * @type {CreateHotelRoomDto}
     * @memberof RoomsApiRoomControllerCreate
     */
    readonly createHotelRoomDto: CreateHotelRoomDto;
}
/**
 * Request parameters for roomControllerFindMany operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerFindManyRequest
 */
export interface RoomsApiRoomControllerFindManyRequest {
    /**
     *
     * @type {number}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterHotelRoomDto
     * @type {string}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly filters?: string;
    /**
     * JSON string of SortHotelRoomDto[]
     * @type {string}
     * @memberof RoomsApiRoomControllerFindMany
     */
    readonly sort?: string;
}
/**
 * Request parameters for roomControllerFindManyByBranchId operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerFindManyByBranchIdRequest
 */
export interface RoomsApiRoomControllerFindManyByBranchIdRequest {
    /**
     *
     * @type {string}
     * @memberof RoomsApiRoomControllerFindManyByBranchId
     */
    readonly branchId: string;
}
/**
 * Request parameters for roomControllerFindOne operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerFindOneRequest
 */
export interface RoomsApiRoomControllerFindOneRequest {
    /**
     *
     * @type {string}
     * @memberof RoomsApiRoomControllerFindOne
     */
    readonly id: string;
}
/**
 * Request parameters for roomControllerPermanentDelete operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerPermanentDeleteRequest
 */
export interface RoomsApiRoomControllerPermanentDeleteRequest {
    /**
     *
     * @type {ImmediateDeleteRoomsDto}
     * @memberof RoomsApiRoomControllerPermanentDelete
     */
    readonly immediateDeleteRoomsDto: ImmediateDeleteRoomsDto;
}
/**
 * Request parameters for roomControllerRemove operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerRemoveRequest
 */
export interface RoomsApiRoomControllerRemoveRequest {
    /**
     *
     * @type {string}
     * @memberof RoomsApiRoomControllerRemove
     */
    readonly id: string;
}
/**
 * Request parameters for roomControllerRestore operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerRestoreRequest
 */
export interface RoomsApiRoomControllerRestoreRequest {
    /**
     *
     * @type {string}
     * @memberof RoomsApiRoomControllerRestore
     */
    readonly id: string;
}
/**
 * Request parameters for roomControllerUpdate operation in RoomsApi.
 * @export
 * @interface RoomsApiRoomControllerUpdateRequest
 */
export interface RoomsApiRoomControllerUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof RoomsApiRoomControllerUpdate
     */
    readonly id: string;
    /**
     *
     * @type {UpdateHotelRoomDto}
     * @memberof RoomsApiRoomControllerUpdate
     */
    readonly updateHotelRoomDto: UpdateHotelRoomDto;
}
/**
 * RoomsApi - object-oriented interface
 * @export
 * @class RoomsApi
 * @extends {BaseAPI}
 */
export declare class RoomsApi extends BaseAPI {
    /**
     *
     * @summary Create a new room
     * @param {RoomsApiRoomControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerCreate(requestParameters: RoomsApiRoomControllerCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HotelRoom, any>>;
    /**
     *
     * @summary Get all soft-deleted rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HotelRoom[], any>>;
    /**
     *
     * @summary Get all rooms with pagination and filters
     * @param {RoomsApiRoomControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerFindMany(requestParameters?: RoomsApiRoomControllerFindManyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HotelRoomPaginationResultDto, any>>;
    /**
     *
     * @summary ADMIN - STAFF Get all rooms by branch ID
     * @param {RoomsApiRoomControllerFindManyByBranchIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerFindManyByBranchId(requestParameters: RoomsApiRoomControllerFindManyByBranchIdRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HotelRoom[], any>>;
    /**
     *
     * @summary Get a room by id
     * @param {RoomsApiRoomControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerFindOne(requestParameters: RoomsApiRoomControllerFindOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HotelRoom, any>>;
    /**
     *
     * @summary ADMIN - Delete rooms permanently
     * @param {RoomsApiRoomControllerPermanentDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerPermanentDelete(requestParameters: RoomsApiRoomControllerPermanentDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Soft delete a room
     * @param {RoomsApiRoomControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerRemove(requestParameters: RoomsApiRoomControllerRemoveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Restore a soft-deleted room
     * @param {RoomsApiRoomControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerRestore(requestParameters: RoomsApiRoomControllerRestoreRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseWithMessage, any>>;
    /**
     *
     * @summary Update a room
     * @param {RoomsApiRoomControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    roomControllerUpdate(requestParameters: RoomsApiRoomControllerUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HotelRoom, any>>;
}
