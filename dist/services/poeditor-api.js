"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POEditorApi = exports.POEditorApiFactory = exports.POEditorApiFp = exports.POEditorApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * POEditorApi - axios parameter creator
 * @export
 */
const POEditorApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Add translations to POEditor project
         * @param {AddTranslationDto} addTranslationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerAddTranslation: (addTranslationDto_1, ...args_1) => __awaiter(this, [addTranslationDto_1, ...args_1], void 0, function* (addTranslationDto, options = {}) {
            // verify required parameter 'addTranslationDto' is not null or undefined
            (0, common_1.assertParamExists)('poeditorControllerAddTranslation', 'addTranslationDto', addTranslationDto);
            const localVarPath = `/api/poeditor/translations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addTranslationDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get translations from POEditor project
         * @param {GetTranslationsRequestDto} getTranslationsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerGetTranslations: (getTranslationsRequestDto_1, ...args_1) => __awaiter(this, [getTranslationsRequestDto_1, ...args_1], void 0, function* (getTranslationsRequestDto, options = {}) {
            // verify required parameter 'getTranslationsRequestDto' is not null or undefined
            (0, common_1.assertParamExists)('poeditorControllerGetTranslations', 'getTranslationsRequestDto', getTranslationsRequestDto);
            const localVarPath = `/api/poeditor/translations-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getTranslationsRequestDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.POEditorApiAxiosParamCreator = POEditorApiAxiosParamCreator;
/**
 * POEditorApi - functional programming interface
 * @export
 */
const POEditorApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.POEditorApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Add translations to POEditor project
         * @param {AddTranslationDto} addTranslationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerAddTranslation(addTranslationDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.poeditorControllerAddTranslation(addTranslationDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['POEditorApi.poeditorControllerAddTranslation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get translations from POEditor project
         * @param {GetTranslationsRequestDto} getTranslationsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerGetTranslations(getTranslationsRequestDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.poeditorControllerGetTranslations(getTranslationsRequestDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['POEditorApi.poeditorControllerGetTranslations']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.POEditorApiFp = POEditorApiFp;
/**
 * POEditorApi - factory interface
 * @export
 */
const POEditorApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.POEditorApiFp)(configuration);
    return {
        /**
         *
         * @summary Add translations to POEditor project
         * @param {POEditorApiPoeditorControllerAddTranslationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerAddTranslation(requestParameters, options) {
            return localVarFp.poeditorControllerAddTranslation(requestParameters.addTranslationDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get translations from POEditor project
         * @param {POEditorApiPoeditorControllerGetTranslationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        poeditorControllerGetTranslations(requestParameters, options) {
            return localVarFp.poeditorControllerGetTranslations(requestParameters.getTranslationsRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.POEditorApiFactory = POEditorApiFactory;
/**
 * POEditorApi - object-oriented interface
 * @export
 * @class POEditorApi
 * @extends {BaseAPI}
 */
class POEditorApi extends base_1.BaseAPI {
    /**
     *
     * @summary Add translations to POEditor project
     * @param {POEditorApiPoeditorControllerAddTranslationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POEditorApi
     */
    poeditorControllerAddTranslation(requestParameters, options) {
        return (0, exports.POEditorApiFp)(this.configuration).poeditorControllerAddTranslation(requestParameters.addTranslationDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get translations from POEditor project
     * @param {POEditorApiPoeditorControllerGetTranslationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POEditorApi
     */
    poeditorControllerGetTranslations(requestParameters, options) {
        return (0, exports.POEditorApiFp)(this.configuration).poeditorControllerGetTranslations(requestParameters.getTranslationsRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.POEditorApi = POEditorApi;
