"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmenitiesApi = exports.AmenitiesApiFactory = exports.AmenitiesApiFp = exports.AmenitiesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AmenitiesApi - axios parameter creator
 * @export
 */
const AmenitiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create new amenity
         * @param {CreateAmenityDto} createAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerCreate: (createAmenityDto_1, ...args_1) => __awaiter(this, [createAmenityDto_1, ...args_1], void 0, function* (createAmenityDto, options = {}) {
            // verify required parameter 'createAmenityDto' is not null or undefined
            (0, common_1.assertParamExists)('amenitiesControllerCreate', 'createAmenityDto', createAmenityDto);
            const localVarPath = `/api/amenities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAmenityDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get amenities
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterAmenityDto
         * @param {string} [sort] JSON string of SortAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindMany: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/amenities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get amenity by ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindOne: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('amenitiesControllerFindOne', 'id', id);
            const localVarPath = `/api/amenities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete amenity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('amenitiesControllerRemove', 'id', id);
            const localVarPath = `/api/amenities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update amenity
         * @param {string} id
         * @param {UpdateAmenityDto} updateAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerUpdate: (id_1, updateAmenityDto_1, ...args_1) => __awaiter(this, [id_1, updateAmenityDto_1, ...args_1], void 0, function* (id, updateAmenityDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('amenitiesControllerUpdate', 'id', id);
            // verify required parameter 'updateAmenityDto' is not null or undefined
            (0, common_1.assertParamExists)('amenitiesControllerUpdate', 'updateAmenityDto', updateAmenityDto);
            const localVarPath = `/api/amenities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateAmenityDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AmenitiesApiAxiosParamCreator = AmenitiesApiAxiosParamCreator;
/**
 * AmenitiesApi - functional programming interface
 * @export
 */
const AmenitiesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AmenitiesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create new amenity
         * @param {CreateAmenityDto} createAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerCreate(createAmenityDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.amenitiesControllerCreate(createAmenityDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AmenitiesApi.amenitiesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get amenities
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterAmenityDto
         * @param {string} [sort] JSON string of SortAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindMany(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.amenitiesControllerFindMany(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AmenitiesApi.amenitiesControllerFindMany']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get amenity by ID
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindOne(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.amenitiesControllerFindOne(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AmenitiesApi.amenitiesControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete amenity
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.amenitiesControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AmenitiesApi.amenitiesControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update amenity
         * @param {string} id
         * @param {UpdateAmenityDto} updateAmenityDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerUpdate(id, updateAmenityDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.amenitiesControllerUpdate(id, updateAmenityDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AmenitiesApi.amenitiesControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.AmenitiesApiFp = AmenitiesApiFp;
/**
 * AmenitiesApi - factory interface
 * @export
 */
const AmenitiesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AmenitiesApiFp)(configuration);
    return {
        /**
         *
         * @summary Create new amenity
         * @param {AmenitiesApiAmenitiesControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerCreate(requestParameters, options) {
            return localVarFp.amenitiesControllerCreate(requestParameters.createAmenityDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get amenities
         * @param {AmenitiesApiAmenitiesControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindMany(requestParameters = {}, options) {
            return localVarFp.amenitiesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get amenity by ID
         * @param {AmenitiesApiAmenitiesControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerFindOne(requestParameters, options) {
            return localVarFp.amenitiesControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete amenity
         * @param {AmenitiesApiAmenitiesControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerRemove(requestParameters, options) {
            return localVarFp.amenitiesControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update amenity
         * @param {AmenitiesApiAmenitiesControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amenitiesControllerUpdate(requestParameters, options) {
            return localVarFp.amenitiesControllerUpdate(requestParameters.id, requestParameters.updateAmenityDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AmenitiesApiFactory = AmenitiesApiFactory;
/**
 * AmenitiesApi - object-oriented interface
 * @export
 * @class AmenitiesApi
 * @extends {BaseAPI}
 */
class AmenitiesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create new amenity
     * @param {AmenitiesApiAmenitiesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerCreate(requestParameters, options) {
        return (0, exports.AmenitiesApiFp)(this.configuration).amenitiesControllerCreate(requestParameters.createAmenityDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get amenities
     * @param {AmenitiesApiAmenitiesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerFindMany(requestParameters = {}, options) {
        return (0, exports.AmenitiesApiFp)(this.configuration).amenitiesControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get amenity by ID
     * @param {AmenitiesApiAmenitiesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerFindOne(requestParameters, options) {
        return (0, exports.AmenitiesApiFp)(this.configuration).amenitiesControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete amenity
     * @param {AmenitiesApiAmenitiesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerRemove(requestParameters, options) {
        return (0, exports.AmenitiesApiFp)(this.configuration).amenitiesControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update amenity
     * @param {AmenitiesApiAmenitiesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerUpdate(requestParameters, options) {
        return (0, exports.AmenitiesApiFp)(this.configuration).amenitiesControllerUpdate(requestParameters.id, requestParameters.updateAmenityDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AmenitiesApi = AmenitiesApi;
