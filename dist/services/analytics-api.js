"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsControllerGetRoomPerformancePeriodTypeEnum = exports.AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum = exports.AnalyticsControllerGetOccupancyRatePeriodTypeEnum = exports.AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum = exports.AnalyticsApi = exports.AnalyticsApiFactory = exports.AnalyticsApiFp = exports.AnalyticsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
const AnalyticsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get analytics summary for a branch
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetAnalyticsSummary: (branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1) => __awaiter(this, [branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1], void 0, function* (branchId, startDate, endDate, periodType, months, options = {}) {
            const localVarPath = `/api/analytics/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (branchId !== undefined) {
                localVarQueryParameter['branchId'] = branchId;
            }
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }
            if (periodType !== undefined) {
                localVarQueryParameter['periodType'] = periodType;
            }
            if (months !== undefined) {
                localVarQueryParameter['months'] = months;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get occupancy rate analytics
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetOccupancyRatePeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetOccupancyRate: (branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1) => __awaiter(this, [branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1], void 0, function* (branchId, startDate, endDate, periodType, months, options = {}) {
            const localVarPath = `/api/analytics/occupancy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (branchId !== undefined) {
                localVarQueryParameter['branchId'] = branchId;
            }
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }
            if (periodType !== undefined) {
                localVarQueryParameter['periodType'] = periodType;
            }
            if (months !== undefined) {
                localVarQueryParameter['months'] = months;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get revenue analytics
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRevenueAnalytics: (branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1) => __awaiter(this, [branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1], void 0, function* (branchId, startDate, endDate, periodType, months, options = {}) {
            const localVarPath = `/api/analytics/revenue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (branchId !== undefined) {
                localVarQueryParameter['branchId'] = branchId;
            }
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }
            if (periodType !== undefined) {
                localVarQueryParameter['periodType'] = periodType;
            }
            if (months !== undefined) {
                localVarQueryParameter['months'] = months;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get room performance analytics
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetRoomPerformancePeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRoomPerformance: (branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1) => __awaiter(this, [branchId_1, startDate_1, endDate_1, periodType_1, months_1, ...args_1], void 0, function* (branchId, startDate, endDate, periodType, months, options = {}) {
            const localVarPath = `/api/analytics/room-performance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (branchId !== undefined) {
                localVarQueryParameter['branchId'] = branchId;
            }
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }
            if (periodType !== undefined) {
                localVarQueryParameter['periodType'] = periodType;
            }
            if (months !== undefined) {
                localVarQueryParameter['months'] = months;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AnalyticsApiAxiosParamCreator = AnalyticsApiAxiosParamCreator;
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
const AnalyticsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AnalyticsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get analytics summary for a branch
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetAnalyticsSummary(branchId, startDate, endDate, periodType, months, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetAnalyticsSummary(branchId, startDate, endDate, periodType, months, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetAnalyticsSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get occupancy rate analytics
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetOccupancyRatePeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetOccupancyRate(branchId, startDate, endDate, periodType, months, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetOccupancyRate(branchId, startDate, endDate, periodType, months, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetOccupancyRate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get revenue analytics
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRevenueAnalytics(branchId, startDate, endDate, periodType, months, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetRevenueAnalytics(branchId, startDate, endDate, periodType, months, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetRevenueAnalytics']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get room performance analytics
         * @param {string} [branchId] Branch ID to get analytics for
         * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
         * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
         * @param {AnalyticsControllerGetRoomPerformancePeriodTypeEnum} [periodType] Period type for analytics
         * @param {number} [months] Number of months to analyze
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRoomPerformance(branchId, startDate, endDate, periodType, months, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.analyticsControllerGetRoomPerformance(branchId, startDate, endDate, periodType, months, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AnalyticsApi.analyticsControllerGetRoomPerformance']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.AnalyticsApiFp = AnalyticsApiFp;
/**
 * AnalyticsApi - factory interface
 * @export
 */
const AnalyticsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AnalyticsApiFp)(configuration);
    return {
        /**
         *
         * @summary Get analytics summary for a branch
         * @param {AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetAnalyticsSummary(requestParameters = {}, options) {
            return localVarFp.analyticsControllerGetAnalyticsSummary(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get occupancy rate analytics
         * @param {AnalyticsApiAnalyticsControllerGetOccupancyRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetOccupancyRate(requestParameters = {}, options) {
            return localVarFp.analyticsControllerGetOccupancyRate(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get revenue analytics
         * @param {AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRevenueAnalytics(requestParameters = {}, options) {
            return localVarFp.analyticsControllerGetRevenueAnalytics(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get room performance analytics
         * @param {AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRoomPerformance(requestParameters = {}, options) {
            return localVarFp.analyticsControllerGetRoomPerformance(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AnalyticsApiFactory = AnalyticsApiFactory;
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
class AnalyticsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get analytics summary for a branch
     * @param {AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetAnalyticsSummary(requestParameters = {}, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetAnalyticsSummary(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get occupancy rate analytics
     * @param {AnalyticsApiAnalyticsControllerGetOccupancyRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetOccupancyRate(requestParameters = {}, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetOccupancyRate(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get revenue analytics
     * @param {AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetRevenueAnalytics(requestParameters = {}, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetRevenueAnalytics(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get room performance analytics
     * @param {AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetRoomPerformance(requestParameters = {}, options) {
        return (0, exports.AnalyticsApiFp)(this.configuration).analyticsControllerGetRoomPerformance(requestParameters.branchId, requestParameters.startDate, requestParameters.endDate, requestParameters.periodType, requestParameters.months, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AnalyticsApi = AnalyticsApi;
/**
  * @export
  * @enum {string}
  */
var AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum;
(function (AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum) {
    AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum["Daily"] = "DAILY";
    AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum["Monthly"] = "MONTHLY";
    AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum["Yearly"] = "YEARLY";
})(AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum || (exports.AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum = AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var AnalyticsControllerGetOccupancyRatePeriodTypeEnum;
(function (AnalyticsControllerGetOccupancyRatePeriodTypeEnum) {
    AnalyticsControllerGetOccupancyRatePeriodTypeEnum["Daily"] = "DAILY";
    AnalyticsControllerGetOccupancyRatePeriodTypeEnum["Monthly"] = "MONTHLY";
    AnalyticsControllerGetOccupancyRatePeriodTypeEnum["Yearly"] = "YEARLY";
})(AnalyticsControllerGetOccupancyRatePeriodTypeEnum || (exports.AnalyticsControllerGetOccupancyRatePeriodTypeEnum = AnalyticsControllerGetOccupancyRatePeriodTypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum;
(function (AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum) {
    AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum["Daily"] = "DAILY";
    AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum["Monthly"] = "MONTHLY";
    AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum["Yearly"] = "YEARLY";
})(AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum || (exports.AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum = AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum = {}));
/**
  * @export
  * @enum {string}
  */
var AnalyticsControllerGetRoomPerformancePeriodTypeEnum;
(function (AnalyticsControllerGetRoomPerformancePeriodTypeEnum) {
    AnalyticsControllerGetRoomPerformancePeriodTypeEnum["Daily"] = "DAILY";
    AnalyticsControllerGetRoomPerformancePeriodTypeEnum["Monthly"] = "MONTHLY";
    AnalyticsControllerGetRoomPerformancePeriodTypeEnum["Yearly"] = "YEARLY";
})(AnalyticsControllerGetRoomPerformancePeriodTypeEnum || (exports.AnalyticsControllerGetRoomPerformancePeriodTypeEnum = AnalyticsControllerGetRoomPerformancePeriodTypeEnum = {}));
