/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateProvinceDto } from '../models';
import type { Province } from '../models';
import type { ProvincePaginationResultDto } from '../models';
import type { UpdateProvinceDto } from '../models';
/**
 * ProvincesApi - axios parameter creator
 * @export
 */
export declare const ProvincesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new province
     * @param {CreateProvinceDto} createProvinceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerCreate: (createProvinceDto: CreateProvinceDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all soft-deleted provinces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindDeleted: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all provinces with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterProvincesDto
     * @param {string} [sort] JSON string of SortProvinceDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindMany: (page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get province by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a province
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Restore a soft-deleted province
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerRestore: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a province
     * @param {string} id
     * @param {UpdateProvinceDto} updateProvinceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerUpdate: (id: string, updateProvinceDto: UpdateProvinceDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProvincesApi - functional programming interface
 * @export
 */
export declare const ProvincesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new province
     * @param {CreateProvinceDto} createProvinceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerCreate(createProvinceDto: CreateProvinceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>>;
    /**
     *
     * @summary Get all soft-deleted provinces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Province>>>;
    /**
     *
     * @summary Get all provinces with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterProvincesDto
     * @param {string} [sort] JSON string of SortProvinceDto[]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvincePaginationResultDto>>;
    /**
     *
     * @summary Get province by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>>;
    /**
     *
     * @summary Delete a province
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Restore a soft-deleted province
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>>;
    /**
     *
     * @summary Update a province
     * @param {string} id
     * @param {UpdateProvinceDto} updateProvinceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerUpdate(id: string, updateProvinceDto: UpdateProvinceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>>;
};
/**
 * ProvincesApi - factory interface
 * @export
 */
export declare const ProvincesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new province
     * @param {ProvincesApiProvincesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerCreate(requestParameters: ProvincesApiProvincesControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province>;
    /**
     *
     * @summary Get all soft-deleted provinces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<Province>>;
    /**
     *
     * @summary Get all provinces with pagination and filters
     * @param {ProvincesApiProvincesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindMany(requestParameters?: ProvincesApiProvincesControllerFindManyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProvincePaginationResultDto>;
    /**
     *
     * @summary Get province by ID
     * @param {ProvincesApiProvincesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerFindOne(requestParameters: ProvincesApiProvincesControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province>;
    /**
     *
     * @summary Delete a province
     * @param {ProvincesApiProvincesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerRemove(requestParameters: ProvincesApiProvincesControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Restore a soft-deleted province
     * @param {ProvincesApiProvincesControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerRestore(requestParameters: ProvincesApiProvincesControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province>;
    /**
     *
     * @summary Update a province
     * @param {ProvincesApiProvincesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provincesControllerUpdate(requestParameters: ProvincesApiProvincesControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Province>;
};
/**
 * Request parameters for provincesControllerCreate operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerCreateRequest
 */
export interface ProvincesApiProvincesControllerCreateRequest {
    /**
     *
     * @type {CreateProvinceDto}
     * @memberof ProvincesApiProvincesControllerCreate
     */
    readonly createProvinceDto: CreateProvinceDto;
}
/**
 * Request parameters for provincesControllerFindMany operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerFindManyRequest
 */
export interface ProvincesApiProvincesControllerFindManyRequest {
    /**
     *
     * @type {number}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterProvincesDto
     * @type {string}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly filters?: string;
    /**
     * JSON string of SortProvinceDto[]
     * @type {string}
     * @memberof ProvincesApiProvincesControllerFindMany
     */
    readonly sort?: string;
}
/**
 * Request parameters for provincesControllerFindOne operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerFindOneRequest
 */
export interface ProvincesApiProvincesControllerFindOneRequest {
    /**
     *
     * @type {string}
     * @memberof ProvincesApiProvincesControllerFindOne
     */
    readonly id: string;
}
/**
 * Request parameters for provincesControllerRemove operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerRemoveRequest
 */
export interface ProvincesApiProvincesControllerRemoveRequest {
    /**
     *
     * @type {string}
     * @memberof ProvincesApiProvincesControllerRemove
     */
    readonly id: string;
}
/**
 * Request parameters for provincesControllerRestore operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerRestoreRequest
 */
export interface ProvincesApiProvincesControllerRestoreRequest {
    /**
     *
     * @type {string}
     * @memberof ProvincesApiProvincesControllerRestore
     */
    readonly id: string;
}
/**
 * Request parameters for provincesControllerUpdate operation in ProvincesApi.
 * @export
 * @interface ProvincesApiProvincesControllerUpdateRequest
 */
export interface ProvincesApiProvincesControllerUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof ProvincesApiProvincesControllerUpdate
     */
    readonly id: string;
    /**
     *
     * @type {UpdateProvinceDto}
     * @memberof ProvincesApiProvincesControllerUpdate
     */
    readonly updateProvinceDto: UpdateProvinceDto;
}
/**
 * ProvincesApi - object-oriented interface
 * @export
 * @class ProvincesApi
 * @extends {BaseAPI}
 */
export declare class ProvincesApi extends BaseAPI {
    /**
     *
     * @summary Create a new province
     * @param {ProvincesApiProvincesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerCreate(requestParameters: ProvincesApiProvincesControllerCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Province, any>>;
    /**
     *
     * @summary Get all soft-deleted provinces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Province[], any>>;
    /**
     *
     * @summary Get all provinces with pagination and filters
     * @param {ProvincesApiProvincesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerFindMany(requestParameters?: ProvincesApiProvincesControllerFindManyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvincePaginationResultDto, any>>;
    /**
     *
     * @summary Get province by ID
     * @param {ProvincesApiProvincesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerFindOne(requestParameters: ProvincesApiProvincesControllerFindOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Province, any>>;
    /**
     *
     * @summary Delete a province
     * @param {ProvincesApiProvincesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerRemove(requestParameters: ProvincesApiProvincesControllerRemoveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Restore a soft-deleted province
     * @param {ProvincesApiProvincesControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerRestore(requestParameters: ProvincesApiProvincesControllerRestoreRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Province, any>>;
    /**
     *
     * @summary Update a province
     * @param {ProvincesApiProvincesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvincesApi
     */
    provincesControllerUpdate(requestParameters: ProvincesApiProvincesControllerUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Province, any>>;
}
