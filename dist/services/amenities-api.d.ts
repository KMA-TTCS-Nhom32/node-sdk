/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AmenitiesPaginationResultDto } from '../models';
import type { Amenity } from '../models';
import type { CreateAmenityDto } from '../models';
import type { UpdateAmenityDto } from '../models';
/**
 * AmenitiesApi - axios parameter creator
 * @export
 */
export declare const AmenitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create new amenity
     * @param {CreateAmenityDto} createAmenityDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerCreate: (createAmenityDto: CreateAmenityDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get amenities
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterAmenityDto
     * @param {string} [sort] JSON string of SortAmenityDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerFindMany: (page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get amenity by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete amenity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update amenity
     * @param {string} id
     * @param {UpdateAmenityDto} updateAmenityDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerUpdate: (id: string, updateAmenityDto: UpdateAmenityDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AmenitiesApi - functional programming interface
 * @export
 */
export declare const AmenitiesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create new amenity
     * @param {CreateAmenityDto} createAmenityDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerCreate(createAmenityDto: CreateAmenityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Amenity>>;
    /**
     *
     * @summary Get amenities
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterAmenityDto
     * @param {string} [sort] JSON string of SortAmenityDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmenitiesPaginationResultDto>>;
    /**
     *
     * @summary Get amenity by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Amenity>>;
    /**
     *
     * @summary Delete amenity
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update amenity
     * @param {string} id
     * @param {UpdateAmenityDto} updateAmenityDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerUpdate(id: string, updateAmenityDto: UpdateAmenityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Amenity>>;
};
/**
 * AmenitiesApi - factory interface
 * @export
 */
export declare const AmenitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create new amenity
     * @param {AmenitiesApiAmenitiesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerCreate(requestParameters: AmenitiesApiAmenitiesControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Amenity>;
    /**
     *
     * @summary Get amenities
     * @param {AmenitiesApiAmenitiesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerFindMany(requestParameters?: AmenitiesApiAmenitiesControllerFindManyRequest, options?: RawAxiosRequestConfig): AxiosPromise<AmenitiesPaginationResultDto>;
    /**
     *
     * @summary Get amenity by ID
     * @param {AmenitiesApiAmenitiesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerFindOne(requestParameters: AmenitiesApiAmenitiesControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<Amenity>;
    /**
     *
     * @summary Delete amenity
     * @param {AmenitiesApiAmenitiesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerRemove(requestParameters: AmenitiesApiAmenitiesControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update amenity
     * @param {AmenitiesApiAmenitiesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amenitiesControllerUpdate(requestParameters: AmenitiesApiAmenitiesControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Amenity>;
};
/**
 * Request parameters for amenitiesControllerCreate operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerCreateRequest
 */
export interface AmenitiesApiAmenitiesControllerCreateRequest {
    /**
     *
     * @type {CreateAmenityDto}
     * @memberof AmenitiesApiAmenitiesControllerCreate
     */
    readonly createAmenityDto: CreateAmenityDto;
}
/**
 * Request parameters for amenitiesControllerFindMany operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerFindManyRequest
 */
export interface AmenitiesApiAmenitiesControllerFindManyRequest {
    /**
     *
     * @type {number}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterAmenityDto
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly filters?: string;
    /**
     * JSON string of SortAmenityDto
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerFindMany
     */
    readonly sort?: string;
}
/**
 * Request parameters for amenitiesControllerFindOne operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerFindOneRequest
 */
export interface AmenitiesApiAmenitiesControllerFindOneRequest {
    /**
     *
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerFindOne
     */
    readonly id: string;
}
/**
 * Request parameters for amenitiesControllerRemove operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerRemoveRequest
 */
export interface AmenitiesApiAmenitiesControllerRemoveRequest {
    /**
     *
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerRemove
     */
    readonly id: string;
}
/**
 * Request parameters for amenitiesControllerUpdate operation in AmenitiesApi.
 * @export
 * @interface AmenitiesApiAmenitiesControllerUpdateRequest
 */
export interface AmenitiesApiAmenitiesControllerUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof AmenitiesApiAmenitiesControllerUpdate
     */
    readonly id: string;
    /**
     *
     * @type {UpdateAmenityDto}
     * @memberof AmenitiesApiAmenitiesControllerUpdate
     */
    readonly updateAmenityDto: UpdateAmenityDto;
}
/**
 * AmenitiesApi - object-oriented interface
 * @export
 * @class AmenitiesApi
 * @extends {BaseAPI}
 */
export declare class AmenitiesApi extends BaseAPI {
    /**
     *
     * @summary Create new amenity
     * @param {AmenitiesApiAmenitiesControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerCreate(requestParameters: AmenitiesApiAmenitiesControllerCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Amenity, any>>;
    /**
     *
     * @summary Get amenities
     * @param {AmenitiesApiAmenitiesControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerFindMany(requestParameters?: AmenitiesApiAmenitiesControllerFindManyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AmenitiesPaginationResultDto, any>>;
    /**
     *
     * @summary Get amenity by ID
     * @param {AmenitiesApiAmenitiesControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerFindOne(requestParameters: AmenitiesApiAmenitiesControllerFindOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Amenity, any>>;
    /**
     *
     * @summary Delete amenity
     * @param {AmenitiesApiAmenitiesControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerRemove(requestParameters: AmenitiesApiAmenitiesControllerRemoveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update amenity
     * @param {AmenitiesApiAmenitiesControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmenitiesApi
     */
    amenitiesControllerUpdate(requestParameters: AmenitiesApiAmenitiesControllerUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Amenity, any>>;
}
