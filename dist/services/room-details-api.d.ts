/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateRoomDetailDto } from '../models';
import type { RoomDetail } from '../models';
import type { RoomDetailInfinitePaginationResultDto } from '../models';
import type { RoomDetailPaginationResultDto } from '../models';
import type { UpdateRoomDetailDto } from '../models';
/**
 * RoomDetailsApi - axios parameter creator
 * @export
 */
export declare const RoomDetailsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new room detail
     * @param {CreateRoomDetailDto} createRoomDetailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerCreate: (createRoomDetailDto: CreateRoomDetailDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all soft-deleted room details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindDeleted: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all room details with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterRoomDetailDto
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindMany: (page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all room details with infinite pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterRoomDetailDto
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindManyInfinite: (page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a room detail by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Soft delete a room detail
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Restore a soft-deleted room detail
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerRestore: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a room detail
     * @param {string} id
     * @param {UpdateRoomDetailDto} updateRoomDetailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerUpdate: (id: string, updateRoomDetailDto: UpdateRoomDetailDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoomDetailsApi - functional programming interface
 * @export
 */
export declare const RoomDetailsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new room detail
     * @param {CreateRoomDetailDto} createRoomDetailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerCreate(createRoomDetailDto: CreateRoomDetailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>>;
    /**
     *
     * @summary Get all soft-deleted room details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomDetail>>>;
    /**
     *
     * @summary Get all room details with pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterRoomDetailDto
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindMany(page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetailPaginationResultDto>>;
    /**
     *
     * @summary Get all room details with infinite pagination and filters
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [filters] JSON string of FilterRoomDetailDto
     * @param {Array<string>} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindManyInfinite(page?: number, pageSize?: number, filters?: string, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetailInfinitePaginationResultDto>>;
    /**
     *
     * @summary Get a room detail by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>>;
    /**
     *
     * @summary Soft delete a room detail
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Restore a soft-deleted room detail
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerRestore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>>;
    /**
     *
     * @summary Update a room detail
     * @param {string} id
     * @param {UpdateRoomDetailDto} updateRoomDetailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerUpdate(id: string, updateRoomDetailDto: UpdateRoomDetailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetail>>;
};
/**
 * RoomDetailsApi - factory interface
 * @export
 */
export declare const RoomDetailsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new room detail
     * @param {RoomDetailsApiRoomDetailControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerCreate(requestParameters: RoomDetailsApiRoomDetailControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail>;
    /**
     *
     * @summary Get all soft-deleted room details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindDeleted(options?: RawAxiosRequestConfig): AxiosPromise<Array<RoomDetail>>;
    /**
     *
     * @summary Get all room details with pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindMany(requestParameters?: RoomDetailsApiRoomDetailControllerFindManyRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetailPaginationResultDto>;
    /**
     *
     * @summary Get all room details with infinite pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindManyInfinite(requestParameters?: RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetailInfinitePaginationResultDto>;
    /**
     *
     * @summary Get a room detail by id
     * @param {RoomDetailsApiRoomDetailControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerFindOne(requestParameters: RoomDetailsApiRoomDetailControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail>;
    /**
     *
     * @summary Soft delete a room detail
     * @param {RoomDetailsApiRoomDetailControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerRemove(requestParameters: RoomDetailsApiRoomDetailControllerRemoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Restore a soft-deleted room detail
     * @param {RoomDetailsApiRoomDetailControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerRestore(requestParameters: RoomDetailsApiRoomDetailControllerRestoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail>;
    /**
     *
     * @summary Update a room detail
     * @param {RoomDetailsApiRoomDetailControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roomDetailControllerUpdate(requestParameters: RoomDetailsApiRoomDetailControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RoomDetail>;
};
/**
 * Request parameters for roomDetailControllerCreate operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerCreateRequest
 */
export interface RoomDetailsApiRoomDetailControllerCreateRequest {
    /**
     *
     * @type {CreateRoomDetailDto}
     * @memberof RoomDetailsApiRoomDetailControllerCreate
     */
    readonly createRoomDetailDto: CreateRoomDetailDto;
}
/**
 * Request parameters for roomDetailControllerFindMany operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerFindManyRequest
 */
export interface RoomDetailsApiRoomDetailControllerFindManyRequest {
    /**
     *
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterRoomDetailDto
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly filters?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof RoomDetailsApiRoomDetailControllerFindMany
     */
    readonly sort?: Array<string>;
}
/**
 * Request parameters for roomDetailControllerFindManyInfinite operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest
 */
export interface RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest {
    /**
     *
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly page?: number;
    /**
     *
     * @type {number}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly pageSize?: number;
    /**
     * JSON string of FilterRoomDetailDto
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly filters?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof RoomDetailsApiRoomDetailControllerFindManyInfinite
     */
    readonly sort?: Array<string>;
}
/**
 * Request parameters for roomDetailControllerFindOne operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerFindOneRequest
 */
export interface RoomDetailsApiRoomDetailControllerFindOneRequest {
    /**
     *
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerFindOne
     */
    readonly id: string;
}
/**
 * Request parameters for roomDetailControllerRemove operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerRemoveRequest
 */
export interface RoomDetailsApiRoomDetailControllerRemoveRequest {
    /**
     *
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerRemove
     */
    readonly id: string;
}
/**
 * Request parameters for roomDetailControllerRestore operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerRestoreRequest
 */
export interface RoomDetailsApiRoomDetailControllerRestoreRequest {
    /**
     *
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerRestore
     */
    readonly id: string;
}
/**
 * Request parameters for roomDetailControllerUpdate operation in RoomDetailsApi.
 * @export
 * @interface RoomDetailsApiRoomDetailControllerUpdateRequest
 */
export interface RoomDetailsApiRoomDetailControllerUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof RoomDetailsApiRoomDetailControllerUpdate
     */
    readonly id: string;
    /**
     *
     * @type {UpdateRoomDetailDto}
     * @memberof RoomDetailsApiRoomDetailControllerUpdate
     */
    readonly updateRoomDetailDto: UpdateRoomDetailDto;
}
/**
 * RoomDetailsApi - object-oriented interface
 * @export
 * @class RoomDetailsApi
 * @extends {BaseAPI}
 */
export declare class RoomDetailsApi extends BaseAPI {
    /**
     *
     * @summary Create a new room detail
     * @param {RoomDetailsApiRoomDetailControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerCreate(requestParameters: RoomDetailsApiRoomDetailControllerCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomDetail, any>>;
    /**
     *
     * @summary Get all soft-deleted room details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindDeleted(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomDetail[], any>>;
    /**
     *
     * @summary Get all room details with pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindMany(requestParameters?: RoomDetailsApiRoomDetailControllerFindManyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomDetailPaginationResultDto, any>>;
    /**
     *
     * @summary Get all room details with infinite pagination and filters
     * @param {RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindManyInfinite(requestParameters?: RoomDetailsApiRoomDetailControllerFindManyInfiniteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomDetailInfinitePaginationResultDto, any>>;
    /**
     *
     * @summary Get a room detail by id
     * @param {RoomDetailsApiRoomDetailControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerFindOne(requestParameters: RoomDetailsApiRoomDetailControllerFindOneRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomDetail, any>>;
    /**
     *
     * @summary Soft delete a room detail
     * @param {RoomDetailsApiRoomDetailControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerRemove(requestParameters: RoomDetailsApiRoomDetailControllerRemoveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Restore a soft-deleted room detail
     * @param {RoomDetailsApiRoomDetailControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerRestore(requestParameters: RoomDetailsApiRoomDetailControllerRestoreRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomDetail, any>>;
    /**
     *
     * @summary Update a room detail
     * @param {RoomDetailsApiRoomDetailControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomDetailsApi
     */
    roomDetailControllerUpdate(requestParameters: RoomDetailsApiRoomDetailControllerUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomDetail, any>>;
}
