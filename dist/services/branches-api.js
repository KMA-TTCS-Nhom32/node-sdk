"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BranchesApi = exports.BranchesApiFactory = exports.BranchesApiFp = exports.BranchesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BranchesApi - axios parameter creator
 * @export
 */
const BranchesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new branch
         * @param {CreateBranchDto} createBranchDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerCreate: (createBranchDto_1, ...args_1) => __awaiter(this, [createBranchDto_1, ...args_1], void 0, function* (createBranchDto, options = {}) {
            // verify required parameter 'createBranchDto' is not null or undefined
            (0, common_1.assertParamExists)('branchControllerCreate', 'createBranchDto', createBranchDto);
            const localVarPath = `/api/branches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createBranchDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all soft-deleted branches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindDeleted: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/branches/deleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get all branches with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindMany: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/branches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get branches with infinite scroll for client app
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindManyInfinite: (page_1, pageSize_1, filters_1, sort_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, filters_1, sort_1, ...args_1], void 0, function* (page, pageSize, filters, sort, options = {}) {
            const localVarPath = `/api/branches/infinite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get branch by ID or slug
         * @param {string} idOrSlug
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindOne: (idOrSlug_1, acceptLanguage_1, ...args_1) => __awaiter(this, [idOrSlug_1, acceptLanguage_1, ...args_1], void 0, function* (idOrSlug, acceptLanguage, options = {}) {
            // verify required parameter 'idOrSlug' is not null or undefined
            (0, common_1.assertParamExists)('branchControllerFindOne', 'idOrSlug', idOrSlug);
            const localVarPath = `/api/branches/{idOrSlug}`
                .replace(`{${"idOrSlug"}}`, encodeURIComponent(String(idOrSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get latest branches
         * @param {number} [limit] Number of branches to get
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerGetLatestBranches: (limit_1, acceptLanguage_1, ...args_1) => __awaiter(this, [limit_1, acceptLanguage_1, ...args_1], void 0, function* (limit, acceptLanguage, options = {}) {
            const localVarPath = `/api/branches/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a branch
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRemove: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('branchControllerRemove', 'id', id);
            const localVarPath = `/api/branches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Restore a soft-deleted branch
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRestore: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('branchControllerRestore', 'id', id);
            const localVarPath = `/api/branches/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a branch
         * @param {string} id
         * @param {UpdateBranchDto} updateBranchDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerUpdate: (id_1, updateBranchDto_1, ...args_1) => __awaiter(this, [id_1, updateBranchDto_1, ...args_1], void 0, function* (id, updateBranchDto, options = {}) {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('branchControllerUpdate', 'id', id);
            // verify required parameter 'updateBranchDto' is not null or undefined
            (0, common_1.assertParamExists)('branchControllerUpdate', 'updateBranchDto', updateBranchDto);
            const localVarPath = `/api/branches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateBranchDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.BranchesApiAxiosParamCreator = BranchesApiAxiosParamCreator;
/**
 * BranchesApi - functional programming interface
 * @export
 */
const BranchesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BranchesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a new branch
         * @param {CreateBranchDto} createBranchDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerCreate(createBranchDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerCreate(createBranchDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all soft-deleted branches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindDeleted(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerFindDeleted(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerFindDeleted']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get all branches with pagination and filters
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindMany(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerFindMany(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerFindMany']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get branches with infinite scroll for client app
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [filters] JSON string of FilterBranchesDto
         * @param {string} [sort] JSON string of SortBranchDto[]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindManyInfinite(page, pageSize, filters, sort, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerFindManyInfinite(page, pageSize, filters, sort, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerFindManyInfinite']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get branch by ID or slug
         * @param {string} idOrSlug
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindOne(idOrSlug, acceptLanguage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerFindOne(idOrSlug, acceptLanguage, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerFindOne']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Get latest branches
         * @param {number} [limit] Number of branches to get
         * @param {string} [acceptLanguage] Language preference (en, vi)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerGetLatestBranches(limit, acceptLanguage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerGetLatestBranches(limit, acceptLanguage, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerGetLatestBranches']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a branch
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRemove(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerRemove(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerRemove']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Restore a soft-deleted branch
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRestore(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerRestore(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerRestore']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a branch
         * @param {string} id
         * @param {UpdateBranchDto} updateBranchDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerUpdate(id, updateBranchDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.branchControllerUpdate(id, updateBranchDto, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BranchesApi.branchControllerUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.BranchesApiFp = BranchesApiFp;
/**
 * BranchesApi - factory interface
 * @export
 */
const BranchesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BranchesApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a new branch
         * @param {BranchesApiBranchControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerCreate(requestParameters, options) {
            return localVarFp.branchControllerCreate(requestParameters.createBranchDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all soft-deleted branches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindDeleted(options) {
            return localVarFp.branchControllerFindDeleted(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all branches with pagination and filters
         * @param {BranchesApiBranchControllerFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindMany(requestParameters = {}, options) {
            return localVarFp.branchControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get branches with infinite scroll for client app
         * @param {BranchesApiBranchControllerFindManyInfiniteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindManyInfinite(requestParameters = {}, options) {
            return localVarFp.branchControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get branch by ID or slug
         * @param {BranchesApiBranchControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerFindOne(requestParameters, options) {
            return localVarFp.branchControllerFindOne(requestParameters.idOrSlug, requestParameters.acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get latest branches
         * @param {BranchesApiBranchControllerGetLatestBranchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerGetLatestBranches(requestParameters = {}, options) {
            return localVarFp.branchControllerGetLatestBranches(requestParameters.limit, requestParameters.acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a branch
         * @param {BranchesApiBranchControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRemove(requestParameters, options) {
            return localVarFp.branchControllerRemove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Restore a soft-deleted branch
         * @param {BranchesApiBranchControllerRestoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerRestore(requestParameters, options) {
            return localVarFp.branchControllerRestore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a branch
         * @param {BranchesApiBranchControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchControllerUpdate(requestParameters, options) {
            return localVarFp.branchControllerUpdate(requestParameters.id, requestParameters.updateBranchDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BranchesApiFactory = BranchesApiFactory;
/**
 * BranchesApi - object-oriented interface
 * @export
 * @class BranchesApi
 * @extends {BaseAPI}
 */
class BranchesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create a new branch
     * @param {BranchesApiBranchControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerCreate(requestParameters, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerCreate(requestParameters.createBranchDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all soft-deleted branches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindDeleted(options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerFindDeleted(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all branches with pagination and filters
     * @param {BranchesApiBranchControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindMany(requestParameters = {}, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerFindMany(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get branches with infinite scroll for client app
     * @param {BranchesApiBranchControllerFindManyInfiniteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindManyInfinite(requestParameters = {}, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerFindManyInfinite(requestParameters.page, requestParameters.pageSize, requestParameters.filters, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get branch by ID or slug
     * @param {BranchesApiBranchControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerFindOne(requestParameters, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerFindOne(requestParameters.idOrSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get latest branches
     * @param {BranchesApiBranchControllerGetLatestBranchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerGetLatestBranches(requestParameters = {}, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerGetLatestBranches(requestParameters.limit, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a branch
     * @param {BranchesApiBranchControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerRemove(requestParameters, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Restore a soft-deleted branch
     * @param {BranchesApiBranchControllerRestoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerRestore(requestParameters, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerRestore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a branch
     * @param {BranchesApiBranchControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    branchControllerUpdate(requestParameters, options) {
        return (0, exports.BranchesApiFp)(this.configuration).branchControllerUpdate(requestParameters.id, requestParameters.updateBranchDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BranchesApi = BranchesApi;
