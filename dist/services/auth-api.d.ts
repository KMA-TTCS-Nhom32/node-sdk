/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ChangePasswordDto } from '../models';
import type { InitiateForgotPasswordEmailDto } from '../models';
import type { LoginDto } from '../models';
import type { LoginResponseDto } from '../models';
import type { LogoutResponseDto } from '../models';
import type { RefreshTokenDto } from '../models';
import type { RefreshTokenResponseDto } from '../models';
import type { RegisterDto } from '../models';
import type { RegisterResponseDto } from '../models';
import type { ResetPasswordWithOTPEmailDto } from '../models';
import type { RevokeSessionResponseDto } from '../models';
import type { SessionResponseDto } from '../models';
import type { UpdateProfileDto } from '../models';
import type { User } from '../models';
import type { VerifyEmailDto } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Change user password
     * @param {ChangePasswordDto} changePasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerChangePassword: (changePasswordDto: ChangePasswordDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve all active sessions for the current user
     * @summary Get active sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetActiveSessions: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetProfile: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get analytics data for user sessions. Requires ADMIN role.
     * @summary Get session analytics
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetSessionAnalytics: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get suspicious activities for a specific user. Requires ADMIN role.
     * @summary Get suspicious activities
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetSuspiciousActivities: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Initiate forgot password process
     * @param {InitiateForgotPasswordEmailDto} initiateForgotPasswordEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerInitiateForgotPassword: (initiateForgotPasswordEmailDto: InitiateForgotPasswordEmailDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} userAgent
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin: (userAgent: string, loginDto: LoginDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke the current refresh token, effectively logging out the user
     * @summary Logout user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Exchange a valid refresh token for a new access token and refresh token pair
     * @summary Refresh access token
     * @param {RefreshTokenDto} refreshTokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefreshTokens: (refreshTokenDto: RefreshTokenDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {RegisterDto} registerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRegister: (registerDto: RegisterDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset password using OTP
     * @param {ResetPasswordWithOTPEmailDto} resetPasswordWithOTPEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResetPasswordWithOTP: (resetPasswordWithOTPEmailDto: ResetPasswordWithOTPEmailDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a specific session by its ID
     * @summary Revoke specific session
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRevokeSession: (sessionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update user profile
     * @param {UpdateProfileDto} updateProfileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerUpdateProfile: (updateProfileDto: UpdateProfileDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Verify email with OTP code
     * @param {VerifyEmailDto} verifyEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmail: (verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Change user password
     * @param {ChangePasswordDto} changePasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerChangePassword(changePasswordDto: ChangePasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve all active sessions for the current user
     * @summary Get active sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetActiveSessions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponseDto>>;
    /**
     *
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Get analytics data for user sessions. Requires ADMIN role.
     * @summary Get session analytics
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetSessionAnalytics(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get suspicious activities for a specific user. Requires ADMIN role.
     * @summary Get suspicious activities
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetSuspiciousActivities(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Initiate forgot password process
     * @param {InitiateForgotPasswordEmailDto} initiateForgotPasswordEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerInitiateForgotPassword(initiateForgotPasswordEmailDto: InitiateForgotPasswordEmailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} userAgent
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin(userAgent: string, loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>>;
    /**
     * Revoke the current refresh token, effectively logging out the user
     * @summary Logout user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutResponseDto>>;
    /**
     * Exchange a valid refresh token for a new access token and refresh token pair
     * @summary Refresh access token
     * @param {RefreshTokenDto} refreshTokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefreshTokens(refreshTokenDto: RefreshTokenDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenResponseDto>>;
    /**
     *
     * @param {RegisterDto} registerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRegister(registerDto: RegisterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponseDto>>;
    /**
     *
     * @summary Reset password using OTP
     * @param {ResetPasswordWithOTPEmailDto} resetPasswordWithOTPEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResetPasswordWithOTP(resetPasswordWithOTPEmailDto: ResetPasswordWithOTPEmailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke a specific session by its ID
     * @summary Revoke specific session
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRevokeSession(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevokeSessionResponseDto>>;
    /**
     *
     * @summary Update user profile
     * @param {UpdateProfileDto} updateProfileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerUpdateProfile(updateProfileDto: UpdateProfileDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Verify email with OTP code
     * @param {VerifyEmailDto} verifyEmailDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmail(verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Change user password
     * @param {AuthApiAuthControllerChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerChangePassword(requestParameters: AuthApiAuthControllerChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Retrieve all active sessions for the current user
     * @summary Get active sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetActiveSessions(options?: RawAxiosRequestConfig): AxiosPromise<SessionResponseDto>;
    /**
     *
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     * Get analytics data for user sessions. Requires ADMIN role.
     * @summary Get session analytics
     * @param {AuthApiAuthControllerGetSessionAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetSessionAnalytics(requestParameters: AuthApiAuthControllerGetSessionAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get suspicious activities for a specific user. Requires ADMIN role.
     * @summary Get suspicious activities
     * @param {AuthApiAuthControllerGetSuspiciousActivitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetSuspiciousActivities(requestParameters: AuthApiAuthControllerGetSuspiciousActivitiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Initiate forgot password process
     * @param {AuthApiAuthControllerInitiateForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerInitiateForgotPassword(requestParameters: AuthApiAuthControllerInitiateForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogin(requestParameters: AuthApiAuthControllerLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto>;
    /**
     * Revoke the current refresh token, effectively logging out the user
     * @summary Logout user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogout(options?: RawAxiosRequestConfig): AxiosPromise<LogoutResponseDto>;
    /**
     * Exchange a valid refresh token for a new access token and refresh token pair
     * @summary Refresh access token
     * @param {AuthApiAuthControllerRefreshTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefreshTokens(requestParameters: AuthApiAuthControllerRefreshTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefreshTokenResponseDto>;
    /**
     *
     * @param {AuthApiAuthControllerRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRegister(requestParameters: AuthApiAuthControllerRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterResponseDto>;
    /**
     *
     * @summary Reset password using OTP
     * @param {AuthApiAuthControllerResetPasswordWithOTPRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResetPasswordWithOTP(requestParameters: AuthApiAuthControllerResetPasswordWithOTPRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Revoke a specific session by its ID
     * @summary Revoke specific session
     * @param {AuthApiAuthControllerRevokeSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRevokeSession(requestParameters: AuthApiAuthControllerRevokeSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<RevokeSessionResponseDto>;
    /**
     *
     * @summary Update user profile
     * @param {AuthApiAuthControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerUpdateProfile(requestParameters: AuthApiAuthControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary Verify email with OTP code
     * @param {AuthApiAuthControllerVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmail(requestParameters: AuthApiAuthControllerVerifyEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for authControllerChangePassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerChangePasswordRequest
 */
export interface AuthApiAuthControllerChangePasswordRequest {
    /**
     *
     * @type {ChangePasswordDto}
     * @memberof AuthApiAuthControllerChangePassword
     */
    readonly changePasswordDto: ChangePasswordDto;
}
/**
 * Request parameters for authControllerGetSessionAnalytics operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerGetSessionAnalyticsRequest
 */
export interface AuthApiAuthControllerGetSessionAnalyticsRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerGetSessionAnalytics
     */
    readonly userId: string;
}
/**
 * Request parameters for authControllerGetSuspiciousActivities operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerGetSuspiciousActivitiesRequest
 */
export interface AuthApiAuthControllerGetSuspiciousActivitiesRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerGetSuspiciousActivities
     */
    readonly userId: string;
}
/**
 * Request parameters for authControllerInitiateForgotPassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerInitiateForgotPasswordRequest
 */
export interface AuthApiAuthControllerInitiateForgotPasswordRequest {
    /**
     *
     * @type {InitiateForgotPasswordEmailDto}
     * @memberof AuthApiAuthControllerInitiateForgotPassword
     */
    readonly initiateForgotPasswordEmailDto: InitiateForgotPasswordEmailDto;
}
/**
 * Request parameters for authControllerLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginRequest
 */
export interface AuthApiAuthControllerLoginRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerLogin
     */
    readonly userAgent: string;
    /**
     *
     * @type {LoginDto}
     * @memberof AuthApiAuthControllerLogin
     */
    readonly loginDto: LoginDto;
}
/**
 * Request parameters for authControllerRefreshTokens operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerRefreshTokensRequest
 */
export interface AuthApiAuthControllerRefreshTokensRequest {
    /**
     *
     * @type {RefreshTokenDto}
     * @memberof AuthApiAuthControllerRefreshTokens
     */
    readonly refreshTokenDto: RefreshTokenDto;
}
/**
 * Request parameters for authControllerRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerRegisterRequest
 */
export interface AuthApiAuthControllerRegisterRequest {
    /**
     *
     * @type {RegisterDto}
     * @memberof AuthApiAuthControllerRegister
     */
    readonly registerDto: RegisterDto;
}
/**
 * Request parameters for authControllerResetPasswordWithOTP operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerResetPasswordWithOTPRequest
 */
export interface AuthApiAuthControllerResetPasswordWithOTPRequest {
    /**
     *
     * @type {ResetPasswordWithOTPEmailDto}
     * @memberof AuthApiAuthControllerResetPasswordWithOTP
     */
    readonly resetPasswordWithOTPEmailDto: ResetPasswordWithOTPEmailDto;
}
/**
 * Request parameters for authControllerRevokeSession operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerRevokeSessionRequest
 */
export interface AuthApiAuthControllerRevokeSessionRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerRevokeSession
     */
    readonly sessionId: string;
}
/**
 * Request parameters for authControllerUpdateProfile operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerUpdateProfileRequest
 */
export interface AuthApiAuthControllerUpdateProfileRequest {
    /**
     *
     * @type {UpdateProfileDto}
     * @memberof AuthApiAuthControllerUpdateProfile
     */
    readonly updateProfileDto: UpdateProfileDto;
}
/**
 * Request parameters for authControllerVerifyEmail operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerVerifyEmailRequest
 */
export interface AuthApiAuthControllerVerifyEmailRequest {
    /**
     *
     * @type {VerifyEmailDto}
     * @memberof AuthApiAuthControllerVerifyEmail
     */
    readonly verifyEmailDto: VerifyEmailDto;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Change user password
     * @param {AuthApiAuthControllerChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerChangePassword(requestParameters: AuthApiAuthControllerChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve all active sessions for the current user
     * @summary Get active sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetActiveSessions(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionResponseDto, any>>;
    /**
     *
     * @summary Get current user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetProfile(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * Get analytics data for user sessions. Requires ADMIN role.
     * @summary Get session analytics
     * @param {AuthApiAuthControllerGetSessionAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetSessionAnalytics(requestParameters: AuthApiAuthControllerGetSessionAnalyticsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get suspicious activities for a specific user. Requires ADMIN role.
     * @summary Get suspicious activities
     * @param {AuthApiAuthControllerGetSuspiciousActivitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerGetSuspiciousActivities(requestParameters: AuthApiAuthControllerGetSuspiciousActivitiesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Initiate forgot password process
     * @param {AuthApiAuthControllerInitiateForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerInitiateForgotPassword(requestParameters: AuthApiAuthControllerInitiateForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogin(requestParameters: AuthApiAuthControllerLoginRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LoginResponseDto, any>>;
    /**
     * Revoke the current refresh token, effectively logging out the user
     * @summary Logout user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogout(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LogoutResponseDto, any>>;
    /**
     * Exchange a valid refresh token for a new access token and refresh token pair
     * @summary Refresh access token
     * @param {AuthApiAuthControllerRefreshTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRefreshTokens(requestParameters: AuthApiAuthControllerRefreshTokensRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RefreshTokenResponseDto, any>>;
    /**
     *
     * @param {AuthApiAuthControllerRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRegister(requestParameters: AuthApiAuthControllerRegisterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegisterResponseDto, any>>;
    /**
     *
     * @summary Reset password using OTP
     * @param {AuthApiAuthControllerResetPasswordWithOTPRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerResetPasswordWithOTP(requestParameters: AuthApiAuthControllerResetPasswordWithOTPRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke a specific session by its ID
     * @summary Revoke specific session
     * @param {AuthApiAuthControllerRevokeSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRevokeSession(requestParameters: AuthApiAuthControllerRevokeSessionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RevokeSessionResponseDto, any>>;
    /**
     *
     * @summary Update user profile
     * @param {AuthApiAuthControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerUpdateProfile(requestParameters: AuthApiAuthControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     *
     * @summary Verify email with OTP code
     * @param {AuthApiAuthControllerVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerVerifyEmail(requestParameters: AuthApiAuthControllerVerifyEmailRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
