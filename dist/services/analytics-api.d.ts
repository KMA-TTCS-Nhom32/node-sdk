/**
 * AHomeVilla documentation
 * This is AHomeVilla\'s APIs description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AnalyticsSummaryDto } from '../models';
import type { OccupancyRateResponseDto } from '../models';
import type { RevenueTimelineDto } from '../models';
import type { RoomPerformanceDto } from '../models';
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export declare const AnalyticsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get analytics summary for a branch
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetAnalyticsSummary: (branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get occupancy rate analytics
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetOccupancyRatePeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetOccupancyRate: (branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetOccupancyRatePeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get revenue analytics
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRevenueAnalytics: (branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get room performance analytics
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetRoomPerformancePeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRoomPerformance: (branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetRoomPerformancePeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export declare const AnalyticsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get analytics summary for a branch
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetAnalyticsSummary(branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsSummaryDto>>;
    /**
     *
     * @summary Get occupancy rate analytics
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetOccupancyRatePeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetOccupancyRate(branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetOccupancyRatePeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OccupancyRateResponseDto>>;
    /**
     *
     * @summary Get revenue analytics
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRevenueAnalytics(branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevenueTimelineDto>>;
    /**
     *
     * @summary Get room performance analytics
     * @param {string} [branchId] Branch ID to get analytics for
     * @param {string} [startDate] Start date for analytics (YYYY-MM-DD)
     * @param {string} [endDate] End date for analytics (YYYY-MM-DD)
     * @param {AnalyticsControllerGetRoomPerformancePeriodTypeEnum} [periodType] Period type for analytics
     * @param {number} [months] Number of months to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRoomPerformance(branchId?: string, startDate?: string, endDate?: string, periodType?: AnalyticsControllerGetRoomPerformancePeriodTypeEnum, months?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomPerformanceDto>>>;
};
/**
 * AnalyticsApi - factory interface
 * @export
 */
export declare const AnalyticsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get analytics summary for a branch
     * @param {AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetAnalyticsSummary(requestParameters?: AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<AnalyticsSummaryDto>;
    /**
     *
     * @summary Get occupancy rate analytics
     * @param {AnalyticsApiAnalyticsControllerGetOccupancyRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetOccupancyRate(requestParameters?: AnalyticsApiAnalyticsControllerGetOccupancyRateRequest, options?: RawAxiosRequestConfig): AxiosPromise<OccupancyRateResponseDto>;
    /**
     *
     * @summary Get revenue analytics
     * @param {AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRevenueAnalytics(requestParameters?: AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<RevenueTimelineDto>;
    /**
     *
     * @summary Get room performance analytics
     * @param {AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRoomPerformance(requestParameters?: AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoomPerformanceDto>>;
};
/**
 * Request parameters for analyticsControllerGetAnalyticsSummary operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest
 */
export interface AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest {
    /**
     * Branch ID to get analytics for
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetAnalyticsSummary
     */
    readonly branchId?: string;
    /**
     * Start date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetAnalyticsSummary
     */
    readonly startDate?: string;
    /**
     * End date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetAnalyticsSummary
     */
    readonly endDate?: string;
    /**
     * Period type for analytics
     * @type {'DAILY' | 'MONTHLY' | 'YEARLY'}
     * @memberof AnalyticsApiAnalyticsControllerGetAnalyticsSummary
     */
    readonly periodType?: AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum;
    /**
     * Number of months to analyze
     * @type {number}
     * @memberof AnalyticsApiAnalyticsControllerGetAnalyticsSummary
     */
    readonly months?: number;
}
/**
 * Request parameters for analyticsControllerGetOccupancyRate operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsControllerGetOccupancyRateRequest
 */
export interface AnalyticsApiAnalyticsControllerGetOccupancyRateRequest {
    /**
     * Branch ID to get analytics for
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetOccupancyRate
     */
    readonly branchId?: string;
    /**
     * Start date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetOccupancyRate
     */
    readonly startDate?: string;
    /**
     * End date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetOccupancyRate
     */
    readonly endDate?: string;
    /**
     * Period type for analytics
     * @type {'DAILY' | 'MONTHLY' | 'YEARLY'}
     * @memberof AnalyticsApiAnalyticsControllerGetOccupancyRate
     */
    readonly periodType?: AnalyticsControllerGetOccupancyRatePeriodTypeEnum;
    /**
     * Number of months to analyze
     * @type {number}
     * @memberof AnalyticsApiAnalyticsControllerGetOccupancyRate
     */
    readonly months?: number;
}
/**
 * Request parameters for analyticsControllerGetRevenueAnalytics operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest
 */
export interface AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest {
    /**
     * Branch ID to get analytics for
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetRevenueAnalytics
     */
    readonly branchId?: string;
    /**
     * Start date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetRevenueAnalytics
     */
    readonly startDate?: string;
    /**
     * End date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetRevenueAnalytics
     */
    readonly endDate?: string;
    /**
     * Period type for analytics
     * @type {'DAILY' | 'MONTHLY' | 'YEARLY'}
     * @memberof AnalyticsApiAnalyticsControllerGetRevenueAnalytics
     */
    readonly periodType?: AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum;
    /**
     * Number of months to analyze
     * @type {number}
     * @memberof AnalyticsApiAnalyticsControllerGetRevenueAnalytics
     */
    readonly months?: number;
}
/**
 * Request parameters for analyticsControllerGetRoomPerformance operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest
 */
export interface AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest {
    /**
     * Branch ID to get analytics for
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetRoomPerformance
     */
    readonly branchId?: string;
    /**
     * Start date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetRoomPerformance
     */
    readonly startDate?: string;
    /**
     * End date for analytics (YYYY-MM-DD)
     * @type {string}
     * @memberof AnalyticsApiAnalyticsControllerGetRoomPerformance
     */
    readonly endDate?: string;
    /**
     * Period type for analytics
     * @type {'DAILY' | 'MONTHLY' | 'YEARLY'}
     * @memberof AnalyticsApiAnalyticsControllerGetRoomPerformance
     */
    readonly periodType?: AnalyticsControllerGetRoomPerformancePeriodTypeEnum;
    /**
     * Number of months to analyze
     * @type {number}
     * @memberof AnalyticsApiAnalyticsControllerGetRoomPerformance
     */
    readonly months?: number;
}
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export declare class AnalyticsApi extends BaseAPI {
    /**
     *
     * @summary Get analytics summary for a branch
     * @param {AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetAnalyticsSummary(requestParameters?: AnalyticsApiAnalyticsControllerGetAnalyticsSummaryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AnalyticsSummaryDto, any>>;
    /**
     *
     * @summary Get occupancy rate analytics
     * @param {AnalyticsApiAnalyticsControllerGetOccupancyRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetOccupancyRate(requestParameters?: AnalyticsApiAnalyticsControllerGetOccupancyRateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OccupancyRateResponseDto, any>>;
    /**
     *
     * @summary Get revenue analytics
     * @param {AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetRevenueAnalytics(requestParameters?: AnalyticsApiAnalyticsControllerGetRevenueAnalyticsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RevenueTimelineDto, any>>;
    /**
     *
     * @summary Get room performance analytics
     * @param {AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    analyticsControllerGetRoomPerformance(requestParameters?: AnalyticsApiAnalyticsControllerGetRoomPerformanceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoomPerformanceDto[], any>>;
}
/**
  * @export
  * @enum {string}
  */
export declare enum AnalyticsControllerGetAnalyticsSummaryPeriodTypeEnum {
    Daily = "DAILY",
    Monthly = "MONTHLY",
    Yearly = "YEARLY"
}
/**
  * @export
  * @enum {string}
  */
export declare enum AnalyticsControllerGetOccupancyRatePeriodTypeEnum {
    Daily = "DAILY",
    Monthly = "MONTHLY",
    Yearly = "YEARLY"
}
/**
  * @export
  * @enum {string}
  */
export declare enum AnalyticsControllerGetRevenueAnalyticsPeriodTypeEnum {
    Daily = "DAILY",
    Monthly = "MONTHLY",
    Yearly = "YEARLY"
}
/**
  * @export
  * @enum {string}
  */
export declare enum AnalyticsControllerGetRoomPerformancePeriodTypeEnum {
    Daily = "DAILY",
    Monthly = "MONTHLY",
    Yearly = "YEARLY"
}
